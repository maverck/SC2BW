include "TriggerLibs/NativeLib"

include "LibSCBW_h"

//--------------------------------------------------------------------------------------------------
// Library: SC2BW
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSCBW_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libSCBW_InitVariables_completed = false;

void libSCBW_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libSCBW_InitVariables_completed) {
        return;
    }

    libSCBW_InitVariables_completed = true;

    libSCBW_gv_usingSC2BWTestMap = true;
    libSCBW_gv_version = StringExternal("Param/Value/lib_SCBW_E9AAE7CB");
    libSCBW_gv_gamemodeDialog = c_invalidDialogId;
    libSCBW_gv_gamemodeListbox = c_invalidDialogControlId;
    libSCBW_gv_gamemodeDialogSetButton = c_invalidDialogControlId;
    libSCBW_gv_gamemode = 1;
    libSCBW_gv_playerStartingUnits = UnitGroupEmpty();
    libSCBW_gv_players = PlayerGroupEmpty();
    libSCBW_gv_beingHarvested = UnitGroupEmpty();
    libSCBW_gv_workers = UnitGroupEmpty();
    libSCBW_gv_mineralFields = UnitGroupEmpty();
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 14; init_j += 1) {
            libSCBW_gv_controlGroups[init_i][init_j] = UnitGroupEmpty();
        }
    }
    libSCBW_gv_breakForcedRallyInfiniteLoop = UnitGroupEmpty();
    libSCBW_gv_airUnits = UnitGroupEmpty();
    libSCBW_gv_ausMonitoredUnits = UnitGroupEmpty();
    libSCBW_gv_ausBeingSpread = UnitGroupEmpty();
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogs.lv_statsDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogs.lv_rankingDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogs.lv_openStatsDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogs.lv_openStatsButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 15; init_j1 += 1) {
            libSCBW_gv_dialogs.lv_statsDialogRaceButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 15; init_j1 += 1) {
            libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libSCBW_gv_dialogs.lv_realTimeMissionTimerDialog = c_invalidDialogId;
    libSCBW_gv_dialogs.lv_realTimeMissionTimer = c_invalidDialogControlId;
    libSCBW_gv_dialogconstants.lv_dialogWindowHeight = 850;
    libSCBW_gv_dialogconstants.lv_dialogWindowWidth = 652;
    libSCBW_gv_dialogconstants.lv_dialogBorder = 40;
    libSCBW_gv_dialogconstants.lv_dialogLogoHeight = 300;
    libSCBW_gv_dialogconstants.lv_dialogLogoWidth = 590;
    libSCBW_gv_dialogconstants.lv_dialogLogo = "Assets\\Textures\\sc2bw.dds";
    libSCBW_gv_dialogconstants.lv_dialogStatsButtonStyle = "AchievementFrameDescription";
    libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth = 143;
    libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight = 44;
    libSCBW_gv_dialogconstants.lv_dialogStatsButtonAmount = 4;
    libSCBW_gv_dialogconstants.lv_dialogEditBoxWidth = 128;
    libSCBW_gv_dialogconstants.lv_dialogEditBoxHeight = 64;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[init_i1] = 1;
    }
    libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator = 393;
    libSCBW_gv_dialogconstants.lv_openStatsDialogSize = 48;
    libSCBW_gv_otherStats.lv_osMissionTime = TimerCreate();
    libSCBW_gv_ladderRecord.lv_encryptKey = "tcWlGjIVTs1gNCynWtUM";
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        libSCBW_gv_ladderRecord.lv_playerID[init_i1] = "";
    }
    libSCBW_gv_ladderRecord.lv_bankName = "Ladder";
    libSCBW_gv_ladderRecord.lv_gamemodeName = "";
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            libSCBW_gv_ladderRecord.lv_playerRatingName[init_i1][init_j1] = "";
        }
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void libSCBW_InitCustomScript () {
}

// Presets
// Functions
void libSCBW_gf_StarcodeStartCode () {
    // Implementation
        STARCODE_CurrentCode = "0";
}

void libSCBW_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void libSCBW_gf_StarcodeSetCode (string lp_code) {
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void libSCBW_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string libSCBW_gf_StarcodeGetCode () {
    // Implementation
    return STARCODE_CurrentCode;
}

int libSCBW_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string libSCBW_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string libSCBW_gf_StarcodeCompressString (string lp_toCompress) {
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string libSCBW_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string libSCBW_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool libSCBW_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string libSCBW_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string libSCBW_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

void libSCBW_gf_InitSC2BW () {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(libSCBW_gv_mineralFields, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    TimerStart(libSCBW_gv_otherStats.lv_osMissionTime, c_timerDurationInfinite, false, c_timeReal);
    libSCBW_gf_CreateRealTimeTimer();
    MeleeInitResources();
    if ((GameAttributeGameValue("5") == "0001")) {
        libSCBW_gf_OverrideMeleeInitMoveStartingUnits();
        libSCBW_gf_FindBases();
        libSCBW_gf_FixBases();
        libSCBW_gf_FixSpawnPointsAndSpawnPlayers();
        libSCBW_gf_RemoveMovedStartingUnits();
    }
    else {
        if ((libSCBW_gv_usingSC2BWTestMap == false)) {
            libSCBW_gf_OverrideMeleeInitMoveStartingUnits();
            PlayerGroupLoopBegin(libSCBW_gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                MeleeInitUnitsForPlayer(PlayerGroupLoopCurrent(), PlayerRace(PlayerGroupLoopCurrent()), PlayerStartLocation(PlayerGroupLoopCurrent()));
            }
            PlayerGroupLoopEnd();
            libSCBW_gf_RemoveMovedStartingUnits();
        }
        else {
        }
    }
    if ((libSCBW_gf_lCheckLadderConditions() == true)) {
        TriggerEnable(libSCBW_gt_LadderInit, true);
    }
    else {
        MeleeInitOptions();
    }
    MeleeInitAI();
    libSCBW_gf_AddStartingWorkersToGroup();
}

void libSCBW_gf_FixMinimap () {
    // Variable Declarations
    revealer[16] lv_revealers;

    // Variable Initialization

    // Implementation
    PlayerGroupLoopBegin(libSCBW_gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionEntireMap());
        lv_revealers[PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
    }
    PlayerGroupLoopEnd();
    CreepModify(RegionGetCenter(RegionEntireMap()), 5000.0, false, false);
    Wait(0.125, c_timeGame);
    PlayerGroupLoopBegin(libSCBW_gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealerDestroy(lv_revealers[PlayerGroupLoopCurrent()]);
    }
    PlayerGroupLoopEnd();
    Wait(0.125, c_timeGame);
}

void libSCBW_gf_FindBases () {
    // Variable Declarations
    unitgroup lv_mineralsOnMap;
    unitgroup lv_nearbyMinerals;
    unitgroup lv_nearbyVespene;
    unitgroup lv_nearbyCombined;

    // Variable Initialization
    lv_mineralsOnMap = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbyMinerals = UnitGroupEmpty();
    lv_nearbyVespene = UnitGroupEmpty();
    lv_nearbyCombined = UnitGroupEmpty();

    // Implementation
    UnitGroupLoopBegin(lv_mineralsOnMap);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_nearbyVespene = UnitGroupEmpty();
        lv_nearbyMinerals = UnitGroupEmpty();
        lv_nearbyCombined = UnitGroupEmpty();
        lv_nearbyMinerals = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 15.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyVespene = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 15.0), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_nearbyCombined, lv_nearbyMinerals);
        UnitGroupAddUnitGroup(lv_nearbyCombined, lv_nearbyVespene);
        if ((UnitGroupCount(lv_nearbyMinerals, c_unitCountAlive) >= 6) && (UnitGroupCount(lv_nearbyVespene, c_unitCountAlive) >= 1)) {
            libSCBW_gv_bases[libSCBW_gv_baseCount] = UnitGroupCenterOfGroup(lv_nearbyCombined);
            UnitGroupRemoveUnitGroup(lv_mineralsOnMap, lv_nearbyMinerals);
            libSCBW_gv_baseCount += 1;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

void libSCBW_gf_FixBases () {
    int autoAF43BDA2_n;
    int autoAF43BDA2_i;

    // Variable Declarations
    unitgroup lv_nearbyVespene;
    int lv_n;
    unit lv_unitToRemove;

    // Variable Initialization
    lv_nearbyVespene = UnitGroupEmpty();

    // Implementation
    autoAF43BDA2_n = libSCBW_gv_baseCount;
    for (autoAF43BDA2_i = 1; autoAF43BDA2_i <= autoAF43BDA2_n; autoAF43BDA2_i += 1) {
        lv_nearbyVespene = UnitGroup(null, c_playerAny, RegionCircle(libSCBW_gv_bases[lv_n], 15.0), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyVespene, c_unitCountAlive) > 1)) {
            lv_unitToRemove = UnitGroupUnit(lv_nearbyVespene, 1);
            UnitRemove(lv_unitToRemove);
        }
        else {
        }
        lv_n += 1;
    }
}

void libSCBW_gf_FixSpawnPointsAndSpawnPlayers () {
    // Variable Declarations
    unitgroup lv_nearbyResources;
    unitgroup lv_nearbyMinerals;
    unitgroup lv_nearbyVespene;
    point lv_spawnPoint;

    // Variable Initialization
    lv_nearbyResources = UnitGroupEmpty();
    lv_nearbyMinerals = UnitGroupEmpty();
    lv_nearbyVespene = UnitGroupEmpty();

    // Implementation
    PlayerGroupLoopBegin(libSCBW_gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_spawnPoint = PlayerStartLocation(PlayerGroupLoopCurrent());
        lv_nearbyMinerals = UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(PlayerGroupLoopCurrent()), 15.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyVespene = UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(PlayerGroupLoopCurrent()), 15.0), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyResources = UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(PlayerGroupLoopCurrent()), 15.0), UnitFilter((1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        PointSet(lv_spawnPoint, PointWithOffsetPolar(lv_spawnPoint, 2.0, AngleBetweenPoints(lv_spawnPoint, UnitGroupCenterOfGroup(lv_nearbyVespene))));
        PointSet(lv_spawnPoint, PointWithOffsetPolar(lv_spawnPoint, 2.0, AngleBetweenPoints(lv_spawnPoint, UnitGroupCenterOfGroup(lv_nearbyMinerals))));
        MeleeInitUnitsForPlayer(PlayerGroupLoopCurrent(), PlayerRace(PlayerGroupLoopCurrent()), lv_spawnPoint);
    }
    PlayerGroupLoopEnd();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
}

void libSCBW_gf_OverrideMeleeInitMoveStartingUnits () {
    // Variable Declarations
    unitgroup lv_allUnits;

    // Variable Initialization
    lv_allUnits = UnitGroupEmpty();

    // Implementation
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupAddUnitGroup(libSCBW_gv_playerStartingUnits, UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupLoopBegin(libSCBW_gv_playerStartingUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionGetBoundsMin(RegionEntireMap()), false);
        }
        UnitGroupLoopEnd();
        PlayerGroupAdd(libSCBW_gv_players, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
}

void libSCBW_gf_RemoveMovedStartingUnits () {
    // Implementation
    UnitGroupLoopBegin(libSCBW_gv_playerStartingUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}

fixed libSCBW_gf_getDamageAmt (unit lp_source, unit lp_target, fixed lp_damage, int lp_damageModifier) {
    // Variable Declarations
    fixed lv_targetShieldAmt;
    fixed lv_damageLeftToApply;
    fixed lv_damageToShields;
    fixed lv_damageToHP;
    fixed lv_finalDamage;

    // Variable Initialization
    lv_targetShieldAmt = UnitGetPropertyFixed(lp_target, c_unitPropShields, c_unitPropCurrent);
    lv_damageLeftToApply = lp_damage;
    lv_damageToShields = lp_damage;

    // Implementation
    lv_damageToShields = (lv_damageToShields - UnitGetPropertyFixed(lp_target, c_unitPropShieldArmor, c_unitPropCurrent));
    if ((lv_targetShieldAmt > lv_damageToShields)) {
        lv_finalDamage = lv_damageToShields;
    }
    else {
        lv_damageLeftToApply = (lv_damageToShields - lv_targetShieldAmt);
        lv_damageToHP = (lv_damageLeftToApply - UnitGetPropertyFixed(lp_target, c_unitPropLifeArmor, c_unitPropCurrent));
        lv_damageToHP = libSCBW_gf_getModifiedDamage(lv_damageToHP, lp_target, lp_damageModifier);
        lv_damageToHP = MaxF(lv_damageToHP, 0.0);
        lv_finalDamage = (lv_targetShieldAmt + lv_damageToHP);
    }
    return lv_finalDamage;
}

void libSCBW_gf_ApplyDamage (unit lp_source, unit lp_target, string lp_sourceDamageEffect, string lp_damageApplyEffect, int lp_damageType, bool lp_miss) {
    // Variable Declarations
    fixed lv_damage;

    // Variable Initialization

    // Implementation
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lp_source) == true) && (UnitIsAlive(lp_target) == true)) {
        lv_damage = libSCBW_gf_getDamageAmt(lp_source, lp_target, CatalogFieldValueGetAsInt(c_gameCatalogEffect, lp_sourceDamageEffect, "Amount", UnitGetOwner(lp_source)), lp_damageType);
        lv_damage = MaxF(lv_damage, 0.5);
        CatalogFieldValueSet(c_gameCatalogEffect, lp_damageApplyEffect, "Amount", UnitGetOwner(lp_source), FixedToString(lv_damage, c_fixedPrecisionAny));
        if ((lp_miss == true)) {
            UnitCreateEffectPoint(lp_source, lp_damageApplyEffect, libSCBW_gf_getMissOffset(UnitGetPosition(lp_source), UnitGetPosition(lp_target)));
        }
        else {
            UnitCreateEffectUnit(lp_source, lp_damageApplyEffect, lp_target);
        }
        CatalogFieldValueSet(c_gameCatalogEffect, lp_damageApplyEffect, "Amount", UnitGetOwner(lp_source), "0");
    }
    else {
    }
}

bool libSCBW_gf_Miss (unit lp_source, unit lp_target) {
    // Variable Declarations
    int lv_r;

    // Variable Initialization
    lv_r = RandomInt(0, 255);

    // Implementation
    if ((((lv_r >= 119) && (PointPathingCliffLevel(UnitGetPosition(lp_target)) > PointPathingCliffLevel(UnitGetPosition(lp_source))) && (UnitFilterMatch(lp_target, UnitGetOwner(lp_target), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitFilterMatch(lp_source, UnitGetOwner(lp_source), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) || (UnitHasBehavior(lp_target, "DarkSwarm") == true))) {
        return true;
    }
    else {
        return false;
    }
}

point libSCBW_gf_getMissOffset (point lp_source, point lp_target) {
    // Implementation
    return libNtve_gf_PointOffsetTowardsPoint(lp_target, 0.55, lp_source);
}

fixed libSCBW_gf_getExplosiveDamage (fixed lp_originalDamage, unit lp_target) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization
    lv_result = lp_originalDamage;

    // Implementation
    lv_result = (lp_originalDamage * libSCBW_gf_getExplosiveDamageModifier(lp_target));
    return lv_result;
}

fixed libSCBW_gf_getExplosiveDamageModifier (unit lp_target) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior(lp_target, "UnitFilterSmall") == true)) {
        lv_result = 0.5;
    }
    else if ((UnitHasBehavior(lp_target, "UnitFilterMedium") == true)) {
        lv_result = 0.75;
    }
    else if ((UnitHasBehavior(lp_target, "UnitFilterLarge") == true)) {
        lv_result = 1.0;
    }
    return lv_result;
}

fixed libSCBW_gf_getConcussiveDamage (fixed lp_originalDamage, unit lp_target) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization
    lv_result = lp_originalDamage;

    // Implementation
    lv_result = (lp_originalDamage * libSCBW_gf_getConcussiveDamageModifier(lp_target));
    return lv_result;
}

fixed libSCBW_gf_getConcussiveDamageModifier (unit lp_target) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior(lp_target, "UnitFilterSmall") == true)) {
        lv_result = 1.0;
    }
    else if ((UnitHasBehavior(lp_target, "UnitFilterMedium") == true)) {
        lv_result = 0.5;
    }
    else if ((UnitHasBehavior(lp_target, "UnitFilterLarge") == true)) {
        lv_result = 0.25;
    }
    return lv_result;
}

fixed libSCBW_gf_getModifiedDamage (fixed lp_damage, unit lp_target, int lp_modifier) {
    int auto02C75EC9_val;

    // Implementation
    auto02C75EC9_val = lp_modifier;
    if (auto02C75EC9_val == libSCBW_ge_DamageModifier_None) {
        return lp_damage;
    }
    else if (auto02C75EC9_val == libSCBW_ge_DamageModifier_Explosive) {
        return libSCBW_gf_getExplosiveDamage(lp_damage, lp_target);
    }
    else if (auto02C75EC9_val == libSCBW_ge_DamageModifier_Concussive) {
        return libSCBW_gf_getConcussiveDamage(lp_damage, lp_target);
    }
    else {
        return lp_damage;
    }
}

void libSCBW_gf_AddStartingWorkersToGroup () {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(libSCBW_gv_workers, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}

void libSCBW_gf_WorkerVariableSpeed () {
    int auto05BC3EB9_val;
    int auto2F9C38C9_val;

    // Variable Declarations
    int lv_r1;
    int lv_r2;

    // Variable Initialization
    lv_r1 = RandomInt(1, 2);
    lv_r2 = RandomInt(1, 2);

    // Implementation
    UnitGroupLoopBegin(libSCBW_gv_workers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_r1 = RandomInt(1, 2);
        lv_r2 = RandomInt(1, 2);
        auto05BC3EB9_val = lv_r1;
        if (auto05BC3EB9_val == 1) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "WorkerExtraSpeed", UnitGroupLoopCurrent(), 1);
        }
        else if (auto05BC3EB9_val == 2) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "WorkerReducedSpeed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
        auto2F9C38C9_val = lv_r2;
        if (auto2F9C38C9_val == 1) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "WorkerExtraSpeed", 1);
        }
        else if (auto2F9C38C9_val == 2) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "WorkerReducedSpeed", 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

bool libSCBW_gf_FreeMineralPatchNearby (unit lp_sourceUnit) {
    // Variable Declarations
    point lv_sourcePoint;
    unitgroup lv_nearbyMinerals;

    // Variable Initialization
    lv_sourcePoint = UnitGetPosition(lp_sourceUnit);
    lv_nearbyMinerals = UnitGroup("MineralField", c_playerAny, RegionCircle(lv_sourcePoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    UnitGroupLoopBegin(lv_nearbyMinerals);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupHasUnit(libSCBW_gv_beingHarvested, UnitGroupLoopCurrent()) == false)) {
            return true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return false;
}

void libSCBW_gf_CheckBuildingLarvaEgg (int lp_player, int lp_group) {
    // Variable Declarations
    int lv_n;
    bool lv_structurePresent;
    unit lv_structure;
    bool lv_break;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    while ((lv_break == false) && (lv_n < UnitGroupCount(libSCBW_gv_controlGroups[lp_player][lp_group], c_unitCountAlive))) {
        if (((UnitGetType(UnitGroupUnit(libSCBW_gv_controlGroups[lp_player][lp_group], lv_n)) == "Egg") || (UnitGetType(UnitGroupUnit(libSCBW_gv_controlGroups[lp_player][lp_group], lv_n)) == "Larva"))) {
            lv_break = true;
            UnitGroupClear(libSCBW_gv_controlGroups[lp_player][lp_group]);
            UnitControlGroupClear(lp_player, lp_group);
        }
        else {
        }
        if ((lv_break == false)) {
            if ((UnitFilterMatch(UnitGroupUnit(libSCBW_gv_controlGroups[lp_player][lp_group], lv_n), lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                lv_structurePresent = true;
                lv_structure = UnitGroupUnit(libSCBW_gv_controlGroups[lp_player][lp_group], lv_n);
            }
            else {
            }
        }
        else {
        }
        lv_n += 1;
    }
    if ((lv_structurePresent == true) && (lv_break == false)) {
        libSCBW_gf_SetControlGrouptoBuilding(lp_player, lp_group, lv_structure);
    }
    else {
    }
}

void libSCBW_gf_SetControlGrouptoBuilding (int lp_player, int lp_group, unit lp_unit) {
    // Implementation
    UnitGroupClear(libSCBW_gv_controlGroups[lp_player][lp_group]);
    libSCBW_gv_controlGroups[lp_player][lp_group] = libNtve_gf_ConvertUnitToUnitGroup(lp_unit);
    UnitControlGroupClear(lp_player, lp_group);
    UnitControlGroupAddUnit(lp_player, lp_group, lp_unit);
}

void libSCBW_gf_Deselect12Units (int lp_player) {
    // Variable Declarations
    int lv_n;
    int lv_i;

    // Variable Initialization
    lv_n = UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive);
    lv_i = 12;

    // Implementation
    while ((lv_n > lv_i)) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(lp_player), lv_n), lp_player, false);
        lv_n -= 1;
    }
}

void libSCBW_gf_Deselect1Building (int lp_player) {
    // Variable Declarations
    int lv_n;
    int lv_i;
    int lv_b;

    // Variable Initialization
    lv_n = UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive);
    lv_i = 1;

    // Implementation
    while ((lv_n >= lv_i)) {
        if ((UnitFilterMatch(UnitGroupUnit(UnitGroupSelected(lp_player), lv_n), lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (lv_b == 0)) {
            lv_b = 1;
            lv_n -= 1;
        }
        else {
            UnitSelect(UnitGroupUnit(UnitGroupSelected(lp_player), lv_n), lp_player, false);
            lv_n -= 1;
        }
    }
}

bool libSCBW_gf_CheckUnitStackingRestrictions (unitgroup lp_selectedUnits) {
    // Variable Declarations
    bool lv_broken;
    bool lv_lessthan12selected;
    bool lv_valid;
    int lv_n;
    int lv_i;
    fixed lv_distance;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    if ((UnitGroupCount(lp_selectedUnits, c_unitCountAlive) < 13)) {
        lv_lessthan12selected = true;
        while ((lv_n < UnitGroupCount(lp_selectedUnits, c_unitCountAlive)) && (lv_distance < 2.0)) {
            if ((lv_distance < DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lp_selectedUnits, lv_n)), UnitGroupCenterOfGroup(lp_selectedUnits)))) {
                lv_distance = DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lp_selectedUnits, lv_n)), UnitGroupCenterOfGroup(lp_selectedUnits));
            }
            else {
            }
            lv_n += 1;
        }
    }
    else {
    }
    if ((lv_distance > 2.0)) {
        lv_broken = true;
    }
    else {
    }
    if ((lv_broken == true) && (lv_lessthan12selected == true)) {
        lv_valid = true;
    }
    else {
        lv_valid = false;
    }
    return lv_valid;
}

bool libSCBW_gf_UnitatArrivedOrderPoint (unit lp_unit, order lp_order) {
    // Variable Declarations
    bool lv_arrived;
    fixed lv_distancebetweenpoints;

    // Variable Initialization

    // Implementation
    if ((UnitOrder(lp_unit, 0) == Order(AbilityCommand("move", 2)))) {
        lv_arrived = true;
    }
    else {
        if ((OrderGetTargetPosition(UnitOrder(lp_unit, 0)) != null)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), OrderGetTargetPosition(UnitOrder(lp_unit, 0))) <= 0.1)) {
                lv_arrived = true;
            }
            else {
            }
        }
        else {
        }
    }
    return lv_arrived;
}

trigger auto_libSCBW_gf_CheckAirUnitsToSpread_Trigger = null;

void libSCBW_gf_CheckAirUnitsToSpread () {
    if (auto_libSCBW_gf_CheckAirUnitsToSpread_Trigger == null) {
        auto_libSCBW_gf_CheckAirUnitsToSpread_Trigger = TriggerCreate("auto_libSCBW_gf_CheckAirUnitsToSpread_TriggerFunc");
    }

    TriggerExecute(auto_libSCBW_gf_CheckAirUnitsToSpread_Trigger, false, false);
}

bool auto_libSCBW_gf_CheckAirUnitsToSpread_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    bool lv_magicBoxBroken;
    int lv_n;
    unit lv_unit;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    while ((lv_n <= UnitGroupCount(libSCBW_gv_airUnits, c_unitCountAlive))) {
        lv_unit = UnitGroupUnit(libSCBW_gv_airUnits, lv_n);
        lv_player = UnitGetOwner(lv_unit);
        if ((UnitHasBehavior(lv_unit, "AirBeingSpread") == false)) {
            lv_magicBoxBroken = libSCBW_gf_CheckUnitStackingRestrictions(UnitGroupSelected(UnitGetOwner(lv_unit)));
            if ((UnitHasBehavior(lv_unit, "AirBeingSpread") == false) && (UnitHasBehavior(lv_unit, "AirStackCheck") == false) && ((UnitOrderCount(lv_unit) == 0) || (UnitGroupCount(UnitGroupSelected(lv_player), c_unitCountAlive) > 12) || (UnitIsSelected(lv_unit, lv_player) == false) || (lv_magicBoxBroken == false))) {
                libSCBW_gf_SpreadStackedAir(lv_unit);
            }
            else {
            }
        }
        else {
        }
        lv_n += 1;
    }
    return true;
}

void libSCBW_gf_SpreadStackedAir (unit lp_unit) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), 1.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));

    // Implementation
    if ((UnitIsAlive(lp_unit) == true)) {
        if ((libSCBW_gf_UnitatArrivedOrderPoint(lp_unit, UnitOrder(lp_unit, 0)) == true)) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
        }
        PlayerCreateEffectPoint(0, "AirUnitSpreadSearch", lv_point);
    }
    else {
    }
}

trigger auto_libSCBW_gf_CheckMovement_Trigger = null;
int auto_libSCBW_gf_CheckMovement_lp_player;
int auto_libSCBW_gf_CheckMovement_lp_startindex;
unitgroup auto_libSCBW_gf_CheckMovement_lp_allunits;

void libSCBW_gf_CheckMovement (int lp_player, int lp_startindex, unitgroup lp_allunits) {
    auto_libSCBW_gf_CheckMovement_lp_player = lp_player;
    auto_libSCBW_gf_CheckMovement_lp_startindex = lp_startindex;
    auto_libSCBW_gf_CheckMovement_lp_allunits = lp_allunits;

    if (auto_libSCBW_gf_CheckMovement_Trigger == null) {
        auto_libSCBW_gf_CheckMovement_Trigger = TriggerCreate("auto_libSCBW_gf_CheckMovement_TriggerFunc");
    }

    TriggerExecute(auto_libSCBW_gf_CheckMovement_Trigger, false, false);
}

bool auto_libSCBW_gf_CheckMovement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSCBW_gf_CheckMovement_lp_player;
    int lp_startindex = auto_libSCBW_gf_CheckMovement_lp_startindex;
    unitgroup lp_allunits = auto_libSCBW_gf_CheckMovement_lp_allunits;

    // Variable Declarations
    unitgroup lv_unitsinfront;
    unitgroup lv_allunits;
    int lv_index;
    int lv_endindex;
    unit lv_pickedunit;

    // Variable Initialization
    lv_unitsinfront = UnitGroupEmpty();
    lv_allunits = lp_allunits;
    lv_index = lp_startindex;
    lv_endindex = (lv_index + 25);

    // Implementation
    while ((lv_index < lv_endindex)) {
        lv_pickedunit = UnitGroupUnit(lv_allunits, lv_index);
        if ((((UnitGetType(lv_pickedunit) != "Stalker") && (UnitGetType(lv_pickedunit) != "WeaponReaverScarabSmart") && (UnitGetType(lv_pickedunit) != "WeaponReaverScarabDumb")) && (UnitOrderCount(lv_pickedunit) > 0) && (UnitHasBehavior(lv_pickedunit, "WorkerIsMining") == false) && (UnitGroupCount(UnitGroup(null, lp_player, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_pickedunit), (UnitGetPropertyFixed(lv_pickedunit, c_unitPropRadius, c_unitPropCurrent) * 0.75), UnitGetFacing(lv_pickedunit)), (UnitGetPropertyFixed(lv_pickedunit, c_unitPropRadius, c_unitPropCurrent) * 1.5)), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            UnitGroupAddUnitGroup(lv_unitsinfront, UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_pickedunit), (UnitGetPropertyFixed(lv_pickedunit, c_unitPropRadius, c_unitPropCurrent) * 0.75), UnitGetFacing(lv_pickedunit)), (UnitGetPropertyFixed(lv_pickedunit, c_unitPropRadius, c_unitPropCurrent) * 1.5)), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupRemove(lv_unitsinfront, lv_pickedunit);
            if ((UnitHasBehavior(UnitGroupRandomUnit(lv_unitsinfront, c_unitCountAlive), "WorkerIsMining") == false) && (UnitOrderCount(UnitGroupRandomUnit(lv_unitsinfront, c_unitCountAlive)) != 0) && (UnitHasBehavior(UnitGroupRandomUnit(lv_unitsinfront, c_unitCountAlive), "StopMovement") == false) && (UnitHasBehavior(lv_pickedunit, "StopMovement") == false)) {
                UnitSetCustomValue(lv_pickedunit, 47, (UnitGetCustomValue(lv_pickedunit, 47) + 1.0));
                UnitSetCustomValue(lv_pickedunit, 47, libNtve_gf_ArithmeticRealClamp(UnitGetCustomValue(lv_pickedunit, 47), 0.0, 3.0));
                UnitBehaviorAdd(lv_pickedunit, "StopMovement", lv_pickedunit, 1);
            }
            else {
            }
            UnitGroupClear(lv_unitsinfront);
        }
        else {
            UnitSetCustomValue(lv_pickedunit, 47, (UnitGetCustomValue(lv_pickedunit, 47) - 1.0));
            UnitSetCustomValue(lv_pickedunit, 47, libNtve_gf_ArithmeticRealClamp(UnitGetCustomValue(lv_pickedunit, 47), 0.0, 3.0));
        }
        lv_index += 1;
    }
    return true;
}

void libSCBW_gf_CreateRealTimeTimer () {
    // Implementation
    DialogCreate(libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth, libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight, c_anchorBottomLeft, 175, 297, true);
    libSCBW_gv_dialogs.lv_realTimeMissionTimerDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_realTimeMissionTimerDialog, libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth, libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight, c_anchorCenter, 10, 7, FormatDuration(FixedToInt(TimerGetElapsed(libSCBW_gv_otherStats.lv_osMissionTime))), Color(100,100,100), false, 2.0);
    libSCBW_gv_dialogs.lv_realTimeMissionTimer = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1024, PlayerGroupAll());
    DialogSetVisible(libSCBW_gv_dialogs.lv_realTimeMissionTimerDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(libSCBW_gv_dialogs.lv_realTimeMissionTimerDialog, 90, 30, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNone, true, ColorWithAlpha(0.00, 0.00, 0.00, 49.80), c_triggerBlendModeNormal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
}

void libSCBW_gf_InitiateSpectatorCamera (int lp_player) {
    // Implementation
    CameraSetData(PlayerGroupSingle(lp_player), "SpectatorCamera");
}

void libSCBW_gf_CheckPlayersForSpectators () {
    int auto8E65070D_n;
    int auto8E65070D_i;

    // Variable Declarations
    playergroup lv_players;
    playergroup lv_spectators;
    int lv_n;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();
    lv_spectators = PlayerGroupEmpty();
    lv_n = 1;

    // Implementation
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "startingrally", "0");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectallconjoined", "0");
        if ((PlayerGroupLoopCurrent() != 0) && (PlayerGroupLoopCurrent() != 15) && (UnitGroupCount(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            PlayerGroupAdd(lv_players, PlayerGroupLoopCurrent());
        }
        else {
            PlayerGroupAdd(lv_spectators, PlayerGroupLoopCurrent());
            libSCBW_gf_InitiateSpectatorCamera(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(lv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_n = 1;
        auto8E65070D_n = PlayerGroupCount(lv_spectators);
        for (auto8E65070D_i = 1; auto8E65070D_i <= auto8E65070D_n; auto8E65070D_i += 1) {
            PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, PlayerGroupPlayer(lv_spectators, lv_n), true);
            lv_n += 1;
        }
    }
    PlayerGroupLoopEnd();
}

void libSCBW_gf_sSetArrays () {
    // Implementation
    libSCBW_gv_dialogconstants.lv_statsRaceButtonText[1] = StringExternal("Param/Value/lib_SCBW_024F1DB3");
    libSCBW_gv_dialogconstants.lv_statsRaceButtonText[2] = StringExternal("Param/Value/lib_SCBW_93A76A9A");
    libSCBW_gv_dialogconstants.lv_statsRaceButtonText[3] = StringExternal("Param/Value/lib_SCBW_41B6C534");
    libSCBW_gv_dialogconstants.lv_statsSelectedRace[1] = libSCBW_gf_lGetRace(1);
    libSCBW_gv_dialogconstants.lv_statsSelectedRace[2] = libSCBW_gf_lGetRace(2);
}

void libSCBW_gf_sStatsInit () {
    // Implementation
    libSCBW_gf_sSetArrays();
    libSCBW_gf_sCreateOpenStatsButton(295, 75, c_anchorBottomLeft);
}

void libSCBW_gf_sCreateStatsDialog (int lp_xOffset, int lp_yOffset, int lp_anchor, int lp_uIPlayer, int lp_statsPlayer, bool lp_skip) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_x = 64;
    lv_y = 64;

    // Implementation
    if ((lp_skip == false)) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer]);
        DialogCreate(64, 64, lp_anchor, lp_xOffset, lp_yOffset, true);
        libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_uIPlayer), true);
        while ((lv_x < libSCBW_gv_dialogconstants.lv_dialogWindowWidth) && (libSCBW_gv_dialogconstants.lv_statsDialogOpen[lp_uIPlayer] == true)) {
            Wait(0.0625, c_timeGame);
            lv_x += 50;
            DialogSetSize(DialogLastCreated(), lv_x, 64);
        }
        while ((lv_y < libSCBW_gv_dialogconstants.lv_dialogWindowHeight) && (libSCBW_gv_dialogconstants.lv_statsDialogOpen[lp_uIPlayer] == true)) {
            Wait(0.0625, c_timeGame);
            lv_y += 100;
            DialogSetSize(DialogLastCreated(), libSCBW_gv_dialogconstants.lv_dialogWindowWidth, lv_y);
        }
    }
    else {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer]);
        DialogCreate(libSCBW_gv_dialogconstants.lv_dialogWindowWidth, libSCBW_gv_dialogconstants.lv_dialogWindowHeight, lp_anchor, lp_xOffset, lp_yOffset, true);
        libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_uIPlayer), true);
    }
    DialogSetSize(DialogLastCreated(), libSCBW_gv_dialogconstants.lv_dialogWindowWidth, libSCBW_gv_dialogconstants.lv_dialogWindowHeight);
    libSCBW_gf_sCreateStatsDialogButtons(lp_uIPlayer);
    libSCBW_gf_sCreateStatsInformation(lp_uIPlayer, lp_statsPlayer, libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]);
}

void libSCBW_gf_sCreateStatsDialogButtons (int lp_uIPlayer) {
    int autoAB115BD7_n;
    int autoAB115BD7_i;
    int autoB47AC7C1_n;
    int autoB47AC7C1_i;

    // Variable Declarations
    int lv_n;
    int lv_offset;
    int lv_i;

    // Variable Initialization
    lv_i = 1;

    // Implementation
    autoAB115BD7_n = 2;
    for (autoAB115BD7_i = 1; autoAB115BD7_i <= autoAB115BD7_n; autoAB115BD7_i += 1) {
        lv_offset = (lv_n * libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth);
        libNtve_gf_CreateDialogItemButton(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth, libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + lv_offset), libSCBW_gv_dialogconstants.lv_dialogBorder, StringToText(""), PlayerName(lv_i), "");
        libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[lv_i][lp_uIPlayer] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_uIPlayer), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_uIPlayer), 0.5, 0.0);
        lv_n += 1;
        lv_i += 1;
    }
    lv_n = 0;
    lv_i = 1;
    autoB47AC7C1_n = 3;
    for (autoB47AC7C1_i = 1; autoB47AC7C1_i <= autoB47AC7C1_n; autoB47AC7C1_i += 1) {
        lv_offset = (lv_n * libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth);
        libNtve_gf_CreateDialogItemButton(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth, libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + lv_offset), (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight), StringToText(""), libSCBW_gv_dialogconstants.lv_statsRaceButtonText[lv_i], "");
        libSCBW_gv_dialogs.lv_statsDialogRaceButtons[lv_i][lp_uIPlayer] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_uIPlayer), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_uIPlayer), 0.5, 0.0);
        lv_n += 1;
        lv_i += 1;
    }
    libNtve_gf_SetDialogItemColor(libSCBW_gv_dialogs.lv_statsDialogRaceButtons[libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]][lp_uIPlayer], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lp_uIPlayer));
    libNtve_gf_SetDialogItemColor(libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][lp_uIPlayer], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lp_uIPlayer));
}

void libSCBW_gf_sCreateStatsInformation (int lp_uIPlayer, int lp_statsPlayer, int lp_statsRace) {
    // Implementation
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 200, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + libSCBW_gv_dialogconstants.lv_dialogBorder), PlayerName(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]), Color(100,100,100), true, 0.5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceButtonText", PlayerGroupSingle(lp_uIPlayer));
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 200, 75, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 250), (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogBorder), StringToText(libSCBW_gv_ladderRecord.lv_playerRatingName[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gf_lGetRatingSelectedRace(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], lp_uIPlayer)]), Color(28*100/255,167*100/255,234*100/255), true, 0.5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeSet", PlayerGroupSingle(lp_uIPlayer));
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 200, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 3)), (StringExternal("Param/Value/lib_SCBW_151A10D7") + IntToText(libSCBW_gv_ladderRecord.lv_playerPoints[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 200, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 3)), (StringExternal("Param/Value/lib_SCBW_B24BB521") + IntToText(libSCBW_gv_ladderRecord.lv_playerWins[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 200, 50, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 200), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 3)), (StringExternal("Param/Value/lib_SCBW_1E181173") + IntToText(libSCBW_gv_ladderRecord.lv_playerLosses[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 4)), StringExternal("Param/Value/lib_SCBW_67D016D1"), Color(100,100,100), true, 0.5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceButtonText", PlayerGroupSingle(lp_uIPlayer));
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 5)), (libSCBW_gf_lGetRaceLetterFromInteger(libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]) + StringExternal("Param/Value/lib_SCBW_B02D0E8E") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 1, 1, false) + StringExternal("Param/Value/lib_SCBW_48723851") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 1, 2, true) + StringExternal("Param/Value/lib_SCBW_BCCA417E") + IntToText(libSCBW_gf_sGetMatchupWinPercent(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], 1)) + StringExternal("Param/Value/lib_SCBW_45BE0070")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 6)), (libSCBW_gf_lGetRaceLetterFromInteger(libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]) + StringExternal("Param/Value/lib_SCBW_88B97EB6") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 2, 1, false) + StringExternal("Param/Value/lib_SCBW_C4DEB2BD") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 2, 2, true) + StringExternal("Param/Value/lib_SCBW_7EB5C237") + IntToText(libSCBW_gf_sGetMatchupWinPercent(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], 2)) + StringExternal("Param/Value/lib_SCBW_31B2B754")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 50, c_anchorTopLeft, libSCBW_gv_dialogconstants.lv_dialogBorder, (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 7)), (libSCBW_gf_lGetRaceLetterFromInteger(libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]) + StringExternal("Param/Value/lib_SCBW_D94281DC") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 3, 1, false) + StringExternal("Param/Value/lib_SCBW_4336C74D") + libSCBW_gf_sGetMatchupStat(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer], 3, 2, true) + StringExternal("Param/Value/lib_SCBW_C49F9468") + IntToText(libSCBW_gf_sGetMatchupWinPercent(libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer], 3)) + StringExternal("Param/Value/lib_SCBW_2D7F3867")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 9)), (StringExternal("Param/Value/lib_SCBW_FE7223BD")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 9)), (IntToText(libSCBW_gv_otherStats.lv_osAPM[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 10)), (StringExternal("Param/Value/lib_SCBW_0DC91903")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 10)), (FormatDuration(libSCBW_gv_otherStats.lv_osAverageGameLength[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 11)), (StringExternal("Param/Value/lib_SCBW_C779D549")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 11)), (IntToText(libSCBW_gv_otherStats.lv_osAverageWorkersTrained[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 12)), (StringExternal("Param/Value/lib_SCBW_634661E6")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 12)), (IntToText(libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilled[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 13)), (StringExternal("Param/Value/lib_SCBW_48355DF9")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 13)), (IntToText(libSCBW_gv_otherStats.lv_osTotalUnitsLost[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 14)), (StringExternal("Param/Value/lib_SCBW_91427B7A")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 14)), (FormatNumber(libSCBW_gv_otherStats.lv_osTotalDamageDealt[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + 0), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 15)), (StringExternal("Param/Value/lib_SCBW_B323F49D")), Color(100,100,100), true, 0.5);
    libNtve_gf_CreateDialogItemLabel(libSCBW_gv_dialogs.lv_statsDialog[lp_uIPlayer], 300, 25, c_anchorTopLeft, (libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_statsDialogInformationSeperator), (50 + libSCBW_gv_dialogconstants.lv_dialogBorder + libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight + (libSCBW_gv_dialogconstants.lv_dialogBorder * 15)), (FormatNumber(libSCBW_gv_otherStats.lv_osTotalDamageTaken[libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[lp_uIPlayer]][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]])), Color(100,100,100), true, 0.5);
}

void libSCBW_gf_sCreateOpenStatsButton (int lp_xOffset, int lp_yOffset, int lp_anchor) {
    int auto24EBC26F_n;
    int auto24EBC26F_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    auto24EBC26F_n = libSCBW_gf_lCheckNumberofPlayers();
    for (auto24EBC26F_i = 1; auto24EBC26F_i <= auto24EBC26F_n; auto24EBC26F_i += 1) {
        DialogCreate(libSCBW_gv_dialogconstants.lv_dialogStatsButtonWidth, libSCBW_gv_dialogconstants.lv_dialogStatsButtonHeight, lp_anchor, lp_xOffset, lp_yOffset, true);
        libSCBW_gv_dialogs.lv_openStatsDialog[lv_n] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libSCBW_gv_dialogconstants.lv_openStatsDialogSize, libSCBW_gv_dialogconstants.lv_openStatsDialogSize, c_anchorCenter, 0, 0, StringExternal("Param/Value/lib_SCBW_9CFE1815"), StringExternal("Param/Value/lib_SCBW_31A6ACA0"), "");
        libSCBW_gv_dialogs.lv_openStatsButton[lv_n] = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_n), true);
        lv_n += 1;
    }
}

text libSCBW_gf_sGetMatchupStat (int lp_statsPlayer, int lp_statsRace, int lp_statsRace2, int lp_winLose, bool lp_getLose) {
    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    lv_text = IntToText(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_statsPlayer][lp_statsRace][lp_statsRace2][lp_winLose]);
    return lv_text;
}

int libSCBW_gf_sGetMatchupWinPercent (int lp_statsPlayer, int lp_statsRace2) {
    // Variable Declarations
    int lv_losesWithoutInitialLose;
    fixed lv__1;
    fixed lv__2;
    fixed lv__3;

    // Variable Initialization

    // Implementation
    lv_losesWithoutInitialLose = libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_statsPlayer][libSCBW_gf_lGetRace(lp_statsPlayer)][lp_statsRace2][2];
    lv__1 = (IntToFixed(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_statsPlayer][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_statsPlayer]][lp_statsRace2][1]) + IntToFixed(lv_losesWithoutInitialLose));
    if ((lv__1 <= 0.0)) {
        return 0;
    }
    else {
        lv__2 = (IntToFixed(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_statsPlayer][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_statsPlayer]][lp_statsRace2][1]) / lv__1);
        lv__3 = (lv__2 * 100.0);
        return FixedToInt(lv__3);
    }
}

void libSCBW_gf_osLoadBankValues (int lp_player) {
    int autoEAA2B566_n;
    int autoEAA2B566_i;

    // Variable Declarations
    int lv_n;
    string lv_decrypt;

    // Variable Initialization
    lv_n = 3;
    lv_decrypt = "";

    // Implementation
    lv_decrypt = BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "OtherStats", "Stats");
    lv_decrypt = libSCBW_gf_StarcodeDecryptString(lv_decrypt, libSCBW_gv_ladderRecord.lv_encryptKey);
    lv_decrypt = libSCBW_gf_StarcodeDecompressString(lv_decrypt);
    libSCBW_gf_StarcodeSetCode(lv_decrypt);
    autoEAA2B566_n = 3;
    for (autoEAA2B566_i = 1; autoEAA2B566_i <= autoEAA2B566_n; autoEAA2B566_i += 1) {
        libSCBW_gv_otherStats.lv_osTotalDamageTaken[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(2400000);
        libSCBW_gv_otherStats.lv_osTotalDamageTakenNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osTotalDamageTaken[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osTotalDamageDealt[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(2300000);
        libSCBW_gv_otherStats.lv_osTotalDamageDealtNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osTotalDamageDealt[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osTotalUnitsLost[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(2200000);
        libSCBW_gv_otherStats.lv_osTotalUnitsLostNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osTotalUnitsLost[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilled[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(2100000);
        libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilledNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilled[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osAverageWorkersTrained[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(2000);
        libSCBW_gv_otherStats.lv_osAverageWorkersTrainedNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osAverageWorkersTrained[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osAverageGameLength[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(19000);
        libSCBW_gv_otherStats.lv_osAverageGameLengthNEW[lp_player][lv_n] = libSCBW_gv_otherStats.lv_osAverageGameLength[lp_player][lv_n];
        libSCBW_gv_otherStats.lv_osAPM[lp_player][lv_n] = libSCBW_gf_StarcodeGetIntegerValue(1800);
        lv_n -= 1;
    }
}

void libSCBW_gf_osUpdateStats (int lp_player) {
    // Implementation
    libSCBW_gf_osUpdateAPM(lp_player);
    libSCBW_gf_osUpdateAverageGameLength(lp_player);
    libSCBW_gf_osUpdateDamageDealt(lp_player);
    libSCBW_gf_osUpdateDamageTaken(lp_player);
    libSCBW_gf_osUpdateEnemyKilled(lp_player);
    libSCBW_gf_osUpdateUnitsLost(lp_player);
    libSCBW_gf_osUpdateWorkersTrained(lp_player);
}

void libSCBW_gf_osUpdateAPM (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() > 180.0) && (PlayerScoreValueGetAsInt(lp_player, "APM") > 20)) {
        lv_n = libSCBW_gv_otherStats.lv_osAPM[lp_player][libSCBW_gf_lGetRace(lp_player)];
        lv_n = (lv_n + PlayerScoreValueGetAsInt(lp_player, "APM"));
        lv_n = (lv_n / 2);
        libSCBW_gv_otherStats.lv_osAPM[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
    }
    else {
    }
}

void libSCBW_gf_osUpdateAverageGameLength (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osAverageGameLengthNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + FixedToInt(TimerGetElapsed(libSCBW_gv_otherStats.lv_osMissionTime)));
    lv_n = (lv_n / 2);
    libSCBW_gv_otherStats.lv_osAverageGameLength[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osUpdateWorkersTrained (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osAverageWorkersTrainedNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + PlayerScoreValueGetAsInt(lp_player, "WorkersTotalCount"));
    lv_n = (lv_n / 2);
    libSCBW_gv_otherStats.lv_osAverageWorkersTrained[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osUpdateEnemyKilled (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilledNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + PlayerScoreValueGetAsInt(lp_player, "UnitsKilledCount"));
    libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilled[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osUpdateUnitsLost (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osTotalUnitsLostNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + PlayerScoreValueGetAsInt(lp_player, "UnitsLostCount"));
    libSCBW_gv_otherStats.lv_osTotalUnitsLost[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osUpdateDamageDealt (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osTotalDamageDealtNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + (PlayerScoreValueGetAsInt(lp_player, "LifeDamageDealtTotal") + PlayerScoreValueGetAsInt(lp_player, "ShieldsDamageDealtTotal")));
    libSCBW_gv_otherStats.lv_osTotalDamageDealt[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osUpdateDamageTaken (int lp_player) {
    // Variable Declarations
    int lv_n;

    // Variable Initialization

    // Implementation
    lv_n = libSCBW_gv_otherStats.lv_osTotalDamageTakenNEW[lp_player][libSCBW_gf_lGetRace(lp_player)];
    lv_n = (lv_n + (PlayerScoreValueGetAsInt(lp_player, "LifeDamageTakenTotal") + PlayerScoreValueGetAsInt(lp_player, "ShieldsDamageTakenTotal")));
    libSCBW_gv_otherStats.lv_osTotalDamageTaken[lp_player][libSCBW_gf_lGetRace(lp_player)] = lv_n;
}

void libSCBW_gf_osSaveStats (int lp_player) {
    int autoB5E3F033_n;
    int autoB5E3F033_i;

    // Variable Declarations
    int lv_n;
    string lv_encrypt;

    // Variable Initialization
    lv_n = 1;
    lv_encrypt = "";

    // Implementation
    libSCBW_gf_StarcodeStartCode();
    autoB5E3F033_n = 3;
    for (autoB5E3F033_i = 1; autoB5E3F033_i <= autoB5E3F033_n; autoB5E3F033_i += 1) {
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osAPM[lp_player][lv_n], 1800);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osAverageGameLength[lp_player][lv_n], 19000);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osAverageWorkersTrained[lp_player][lv_n], 2000);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osTotalEnemyUnitsKilled[lp_player][lv_n], 2100000);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osTotalUnitsLost[lp_player][lv_n], 2200000);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osTotalDamageDealt[lp_player][lv_n], 2300000);
        libSCBW_gf_StarcodeStoreIntegerValue(libSCBW_gv_otherStats.lv_osTotalDamageTaken[lp_player][lv_n], 2400000);
        lv_n += 1;
    }
    lv_encrypt = libSCBW_gf_StarcodeCompressString(libSCBW_gf_StarcodeGetCode());
    lv_encrypt = libSCBW_gf_StarcodeEncryptString(lv_encrypt, libSCBW_gv_ladderRecord.lv_encryptKey);
    BankValueSetFromString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "OtherStats", "Stats", lv_encrypt);
    BankSave(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player]);
}

trigger auto_libSCBW_gf_lInit_Trigger = null;
int auto_libSCBW_gf_lInit_lp_player;

void libSCBW_gf_lInit (int lp_player) {
    auto_libSCBW_gf_lInit_lp_player = lp_player;

    if (auto_libSCBW_gf_lInit_Trigger == null) {
        auto_libSCBW_gf_lInit_Trigger = TriggerCreate("auto_libSCBW_gf_lInit_TriggerFunc");
    }

    TriggerExecute(auto_libSCBW_gf_lInit_Trigger, false, false);
}

bool auto_libSCBW_gf_lInit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libSCBW_gf_lInit_lp_player;

    // Implementation
    libSCBW_gf_lSetVariables();
    libSCBW_gf_lLoadBank(lp_player);
    libSCBW_gf_osLoadBankValues(lp_player);
    libSCBW_gf_lDisplayLadderRating(lp_player);
    libSCBW_gf_lSetInitialLose();
    return true;
}

void libSCBW_gf_lSetVariables () {
    int autoAD19CD8B_n;
    int autoAD19CD8B_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    autoAD19CD8B_n = 2;
    for (autoAD19CD8B_i = 1; autoAD19CD8B_i <= autoAD19CD8B_n; autoAD19CD8B_i += 1) {
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][0] = ":(";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][1] = "D-";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][2] = "D";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][3] = "D+";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][4] = "C-";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][5] = "C";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][6] = "C+";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][7] = "B-";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][8] = "B";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][9] = "B+";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][10] = "A-";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][11] = "A";
        libSCBW_gv_ladderRecord.lv_playerRatingName[lv_n][12] = "A+";
        libSCBW_gv_ladderRecord.lv_playerRace[lv_n] = libSCBW_gf_lGetRace(lv_n);
        lv_n += 1;
    }
}

bool libSCBW_gf_lCheckLadderConditions () {
    // Implementation
    if ((libSCBW_gf_lCheckNumberofPlayers() == 2) && (libSCBW_gf_lCheckforUsers() == true) && (GameAttributeGameValue("6") == "0001")) {
        return true;
    }
    else {
        return false;
    }
}

void libSCBW_gf_lLadderErrors () {
    // Implementation
    if ((!((libSCBW_gf_lCheckNumberofPlayers() == 2)))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_AE36E2F1"));
    }
    else {
    }
    if ((libSCBW_gf_lCheckforUsers() == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_3E796E88"));
    }
    else {
    }
}

void libSCBW_gf_lPreloadBanks () {
    // Implementation
}

void libSCBW_gf_lLoadBank (int lp_player) {
    // Implementation
    BankLoad(libSCBW_gv_ladderRecord.lv_bankName, lp_player);
    libSCBW_gv_ladderRecord.lv_playerBanks[lp_player] = BankLastCreated();
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    if ((BankVerify(BankLastCreated()) == true)) {
        libSCBW_gf_lLoadLadderStats(lp_player);
        libSCBW_gf_lLoadMatchupStats(lp_player);
    }
    else {
        libSCBW_gf_lSaveStartingStats(lp_player);
    }
    libSCBW_gf_lCheckPlayerPointsNotBelowThreshold(lp_player);
    libSCBW_gf_lLoadPlayerID(lp_player);
}

void libSCBW_gf_lDisplayLadderRating (int lp_player) {
    // Variable Declarations
    fixed lv_winPercentage;

    // Variable Initialization

    // Implementation
    lv_winPercentage = (IntToFixed(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][1]) + IntToFixed(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][2]));
    if ((lv_winPercentage == 0.0)) {
        lv_winPercentage = 0.0;
    }
    else {
        lv_winPercentage = (IntToFixed(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][1]) / lv_winPercentage);
        lv_winPercentage = (lv_winPercentage * 100.0);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lp_player) + StringExternal("Param/Value/lib_SCBW_7D4B7AAC") + IntToText(libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][libSCBW_gf_lGetRace(lp_player)]) + StringExternal("Param/Value/lib_SCBW_3ED14B5C") + StringToText(libSCBW_gv_ladderRecord.lv_playerRatingName[lp_player][libSCBW_gf_lGetRating(lp_player)]) + StringExternal("Param/Value/lib_SCBW_982820AF") + StringExternal("Param/Value/lib_SCBW_3EB90885") + IntToText(libSCBW_gv_ladderRecord.lv_playerWins[lp_player][libSCBW_gf_lGetRace(lp_player)]) + StringExternal("Param/Value/lib_SCBW_057103B4") + IntToText(libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][libSCBW_gf_lGetRace(lp_player)])));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (libSCBW_gf_lGetRaceLetter(lp_player) + StringExternal("Param/Value/lib_SCBW_9F4C0B98") + libSCBW_gf_lGetRaceLetter(libSCBW_gf_lGetOpponent(lp_player)) + StringExternal("Param/Value/lib_SCBW_F798C918") + IntToText(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][1]) + StringExternal("Param/Value/lib_SCBW_E0AD2BC6") + IntToText(libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][2]) + StringExternal("Param/Value/lib_SCBW_D2409598") + FixedToText(lv_winPercentage, 0) + StringExternal("Param/Value/lib_SCBW_3E3C9BAD")));
}

int libSCBW_gf_lCheckNumberofPlayers () {
    int auto99076A66_n;
    int auto99076A66_i;

    // Variable Declarations
    int lv_n;
    int lv_numberofPlayers;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    auto99076A66_n = 14;
    for (auto99076A66_i = 1; auto99076A66_i <= auto99076A66_n; auto99076A66_i += 1) {
        if ((PlayerStatus(lv_n) == c_playerStatusActive) && (PlayerType(lv_n) == c_playerTypeUser)) {
            lv_numberofPlayers += 1;
        }
        else {
        }
        lv_n += 1;
    }
    return lv_numberofPlayers;
}

bool libSCBW_gf_lCheckforUsers () {
    // Variable Declarations
    int lv_n;
    bool lv_users;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    if (((!((PlayerType(1) == c_playerTypeUser))) || (!((PlayerType(2) == c_playerTypeUser))))) {
    }
    else {
        lv_users = true;
    }
    return lv_users;
}

void libSCBW_gf_lLoadLadderStats (int lp_player) {
    int autoC5F9AB9F_n;
    int autoC5F9AB9F_i;
    int auto50D460EB_n;
    int auto50D460EB_i;

    // Variable Declarations
    string lv_decrypt;
    int lv_n;

    // Variable Initialization
    lv_decrypt = "";
    lv_n = 1;

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        auto50D460EB_n = 3;
        for (auto50D460EB_i = 1; auto50D460EB_i <= auto50D460EB_n; auto50D460EB_i += 1) {
            libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerLosses" + IntToString(lv_n)));
            libSCBW_gv_ladderRecord.lv_playerWins[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerWins" + IntToString(lv_n)));
            libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerPoints" + IntToString(lv_n)));
            lv_n += 1;
        }
    }
    else {
        autoC5F9AB9F_n = 3;
        for (autoC5F9AB9F_i = 1; autoC5F9AB9F_i <= autoC5F9AB9F_n; autoC5F9AB9F_i += 1) {
            libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerLosses" + IntToString(lv_n)));
            libSCBW_gv_ladderRecord.lv_playerWins[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerWins" + IntToString(lv_n)));
            libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerPoints" + IntToString(lv_n)));
            lv_n += 1;
        }
    }
}

void libSCBW_gf_lLoadMatchupStats (int lp_player) {
    int auto08113B48_n;
    int auto08113B48_i;
    int auto02B6AA15_n;
    int auto02B6AA15_i;
    int auto46A75CAC_n;
    int auto46A75CAC_i;
    int autoB1C7B508_n;
    int autoB1C7B508_i;
    int auto8A8DDE71_n;
    int auto8A8DDE71_i;
    int auto6E87B01F_n;
    int auto6E87B01F_i;

    // Variable Declarations
    string lv_decrypt;
    int lv_n;
    int lv_i;
    int lv_p;

    // Variable Initialization
    lv_decrypt = "";
    lv_n = 1;
    lv_i = 1;
    lv_p = 1;

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        autoB1C7B508_n = 3;
        for (autoB1C7B508_i = 1; autoB1C7B508_i <= autoB1C7B508_n; autoB1C7B508_i += 1) {
            auto8A8DDE71_n = 3;
            for (auto8A8DDE71_i = 1; auto8A8DDE71_i <= auto8A8DDE71_n; auto8A8DDE71_i += 1) {
                auto6E87B01F_n = 2;
                for (auto6E87B01F_i = 1; auto6E87B01F_i <= auto6E87B01F_n; auto6E87B01F_i += 1) {
                    libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][lv_n][lv_i][lv_p] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadderMatchup", ("MatchupStats" + IntToString(lv_n) + IntToString(lv_i) + IntToString(lv_p)));
                    lv_p += 1;
                }
                lv_i += 1;
                lv_p = 1;
            }
            lv_i = 1;
            lv_p = 1;
            lv_n += 1;
        }
    }
    else {
        auto08113B48_n = 3;
        for (auto08113B48_i = 1; auto08113B48_i <= auto08113B48_n; auto08113B48_i += 1) {
            auto02B6AA15_n = 3;
            for (auto02B6AA15_i = 1; auto02B6AA15_i <= auto02B6AA15_n; auto02B6AA15_i += 1) {
                auto46A75CAC_n = 2;
                for (auto46A75CAC_i = 1; auto46A75CAC_i <= auto46A75CAC_n; auto46A75CAC_i += 1) {
                    libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][lv_n][lv_i][lv_p] = BankValueGetAsInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "LadderMatchup", ("MatchupStats" + IntToString(lv_n) + IntToString(lv_i) + IntToString(lv_p)));
                    lv_p += 1;
                }
                lv_i += 1;
                lv_p = 1;
            }
            lv_i = 1;
            lv_p = 1;
            lv_n += 1;
        }
    }
}

int libSCBW_gf_lCheckGameMode () {
    // Variable Declarations
    int lv_gameMode;

    // Variable Initialization

    // Implementation
    if (((GameAttributeGameValue("3") == "0002") && (GameAttributeGameValue("4") == "0002") && (GameAttributeGameValue("2") == "0002"))) {
        lv_gameMode = 1;
    }
    else {
    }
    return lv_gameMode;
}

void libSCBW_gf_lSetGameMode () {
    // Implementation
    if (((GameAttributeGameValue("3") == "0002") && (GameAttributeGameValue("4") == "0002") && (GameAttributeGameValue("2") == "0002"))) {
        libSCBW_gv_ladderRecord.lv_gamemodeName = "HCMode";
    }
    else {
        libSCBW_gv_ladderRecord.lv_gamemodeName = "EZMode";
    }
}

void libSCBW_gf_lCheckPlayerPointsNotBelowThreshold (int lp_player) {
    int auto8C429F21_n;
    int auto8C429F21_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    auto8C429F21_n = 3;
    for (auto8C429F21_i = 1; auto8C429F21_i <= auto8C429F21_n; auto8C429F21_i += 1) {
        if ((libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n] < 250)) {
            libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n] = 1000;
        }
        else {
        }
        lv_n += 1;
    }
}

int libSCBW_gf_lGetRating (int lp_player) {
    // Variable Declarations
    int lv_rating;
    int lv_playerPoints;

    // Variable Initialization

    // Implementation
    lv_playerPoints = libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][libSCBW_gf_lGetRace(lp_player)];
    if ((lv_playerPoints <= 399)) {
        lv_rating = 0;
    }
    else if (((lv_playerPoints >= 400) && (lv_playerPoints <= 899))) {
        lv_rating = 1;
    }
    else if (((lv_playerPoints >= 900) && (lv_playerPoints <= 1999))) {
        lv_rating = 2;
    }
    else if (((lv_playerPoints >= 2000) && (lv_playerPoints <= 2999))) {
        lv_rating = 3;
    }
    else if (((lv_playerPoints >= 3000) && (lv_playerPoints <= 3999))) {
        lv_rating = 4;
    }
    else if (((lv_playerPoints >= 4000) && (lv_playerPoints <= 4999))) {
        lv_rating = 5;
    }
    else if (((lv_playerPoints >= 5000) && (lv_playerPoints <= 5999))) {
        lv_rating = 6;
    }
    else if (((lv_playerPoints >= 6000) && (lv_playerPoints <= 6999))) {
        lv_rating = 7;
    }
    else if (((lv_playerPoints >= 7000) && (lv_playerPoints <= 7999))) {
        lv_rating = 8;
    }
    else if (((lv_playerPoints >= 8000) && (lv_playerPoints <= 8999))) {
        lv_rating = 9;
    }
    else if (((lv_playerPoints >= 9000) && (lv_playerPoints <= 10499))) {
        lv_rating = 10;
    }
    else if (((lv_playerPoints >= 10500) && (lv_playerPoints <= 11999))) {
        lv_rating = 11;
    }
    else if ((lv_playerPoints >= 12000)) {
        lv_rating = 12;
    }
    return lv_rating;
}

int libSCBW_gf_lGetRatingSelectedRace (int lp_player, int lp_uIPlayer) {
    // Variable Declarations
    int lv_rating;
    int lv_playerPoints;

    // Variable Initialization

    // Implementation
    lv_playerPoints = libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][libSCBW_gv_dialogconstants.lv_statsSelectedRace[lp_uIPlayer]];
    if ((lv_playerPoints <= 399)) {
        lv_rating = 0;
    }
    else if (((lv_playerPoints >= 400) && (lv_playerPoints <= 899))) {
        lv_rating = 1;
    }
    else if (((lv_playerPoints >= 900) && (lv_playerPoints <= 1999))) {
        lv_rating = 2;
    }
    else if (((lv_playerPoints >= 2000) && (lv_playerPoints <= 2999))) {
        lv_rating = 3;
    }
    else if (((lv_playerPoints >= 3000) && (lv_playerPoints <= 3999))) {
        lv_rating = 4;
    }
    else if (((lv_playerPoints >= 4000) && (lv_playerPoints <= 4999))) {
        lv_rating = 5;
    }
    else if (((lv_playerPoints >= 5000) && (lv_playerPoints <= 5999))) {
        lv_rating = 6;
    }
    else if (((lv_playerPoints >= 6000) && (lv_playerPoints <= 6999))) {
        lv_rating = 7;
    }
    else if (((lv_playerPoints >= 7000) && (lv_playerPoints <= 7999))) {
        lv_rating = 8;
    }
    else if (((lv_playerPoints >= 8000) && (lv_playerPoints <= 8999))) {
        lv_rating = 9;
    }
    else if (((lv_playerPoints >= 9000) && (lv_playerPoints <= 10499))) {
        lv_rating = 10;
    }
    else if (((lv_playerPoints >= 10500) && (lv_playerPoints <= 11999))) {
        lv_rating = 11;
    }
    else if ((lv_playerPoints >= 12000)) {
        lv_rating = 12;
    }
    return lv_rating;
}

int libSCBW_gf_lGetRace (int lp_player) {
    string autoE15B48EF_val;

    // Implementation
    autoE15B48EF_val = PlayerRace(lp_player);
    if (autoE15B48EF_val == "Terr") {
        return 1;
    }
    else if (autoE15B48EF_val == "Zerg") {
        return 2;
    }
    else if (autoE15B48EF_val == "Prot") {
        return 3;
    }
    else {
        return 1;
    }
}

text libSCBW_gf_lGetRaceLetter (int lp_player) {
    string autoD38C0158_val;

    // Implementation
    autoD38C0158_val = PlayerRace(lp_player);
    if (autoD38C0158_val == "Terr") {
        return StringExternal("Param/Value/lib_SCBW_358FFCC6");
    }
    else if (autoD38C0158_val == "Zerg") {
        return StringExternal("Param/Value/lib_SCBW_BA7A9AC1");
    }
    else if (autoD38C0158_val == "Prot") {
        return StringExternal("Param/Value/lib_SCBW_ACD7547F");
    }
    else {
        return StringExternal("Param/Value/lib_SCBW_EBB3633C");
    }
}

text libSCBW_gf_lGetRaceLetterFromInteger (int lp_race) {
    int auto9D3D1719_val;

    // Variable Declarations
    text lv_letter;

    // Variable Initialization

    // Implementation
    auto9D3D1719_val = lp_race;
    if (auto9D3D1719_val == 1) {
        lv_letter = StringExternal("Param/Value/lib_SCBW_4B932342");
    }
    else if (auto9D3D1719_val == 2) {
        lv_letter = StringExternal("Param/Value/lib_SCBW_5CAB9C9C");
    }
    else if (auto9D3D1719_val == 3) {
        lv_letter = StringExternal("Param/Value/lib_SCBW_E9277B27");
    }
    else {
    }
    return lv_letter;
}

int libSCBW_gf_lGetOpponent (int lp_player) {
    int autoAF280270_val;

    // Implementation
    autoAF280270_val = lp_player;
    if (autoAF280270_val == 1) {
        return 2;
    }
    else if (autoAF280270_val == 2) {
        return 1;
    }
    else {
        return 2;
    }
}

string libSCBW_gf_lGetPlayerID (int lp_player) {
    // Variable Declarations
    string lv_playerID;

    // Variable Initialization
    lv_playerID = "";

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        if ((BankKeyExists(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID") == true)) {
            lv_playerID = BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID");
        }
        else {
        }
    }
    else {
        if ((BankKeyExists(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID") == true)) {
            lv_playerID = BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID");
        }
        else {
        }
    }
    return lv_playerID;
}

void libSCBW_gf_lLoadPlayerID (int lp_player) {
    // Variable Declarations
    string lv_playerID;

    // Variable Initialization
    lv_playerID = "";

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        if ((BankKeyExists(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID") == true) && (StringLength(BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID")) == 30)) {
            libSCBW_gv_ladderRecord.lv_playerID[lp_player] = BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID");
        }
        else {
            libSCBW_gv_ladderRecord.lv_playerID[lp_player] = libSCBW_gf_lCreateNewPlayerID();
        }
    }
    else {
        if ((BankKeyExists(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID") == true) && (StringLength(BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID")) == 30)) {
            libSCBW_gv_ladderRecord.lv_playerID[lp_player] = BankValueGetAsString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID");
        }
        else {
            libSCBW_gv_ladderRecord.lv_playerID[lp_player] = libSCBW_gf_lCreateNewPlayerID();
        }
    }
}

string libSCBW_gf_lCreateNewPlayerID () {
    int auto44655C1D_n;
    int auto44655C1D_i;

    // Variable Declarations
    string lv_playerID;

    // Variable Initialization
    lv_playerID = "";

    // Implementation
    auto44655C1D_n = 30;
    for (auto44655C1D_i = 1; auto44655C1D_i <= auto44655C1D_n; auto44655C1D_i += 1) {
        lv_playerID = (lv_playerID + IntToString(RandomInt(0, 9)));
    }
    return lv_playerID;
}

void libSCBW_gf_lSetInitialLose () {
    int auto8E16F6E0_n;
    int auto8E16F6E0_i;
    int autoB06461BF_val;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    auto8E16F6E0_n = 2;
    for (auto8E16F6E0_i = 1; auto8E16F6E0_i <= auto8E16F6E0_n; auto8E16F6E0_i += 1) {
        libSCBW_gv_ladderRecord.lv_playerLosses[lv_n][libSCBW_gf_lGetRace(lv_n)] += 1;
        libSCBW_gv_ladderRecord.lv_playerMatchupStats[lv_n][libSCBW_gf_lGetRace(lv_n)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lv_n))][2] += 1;
        autoB06461BF_val = libSCBW_gf_lGetRating(lv_n);
        if (autoB06461BF_val == 0) {
            libSCBW_gf_lSetAdjustPointsRank(lv_n);
        }
        else if (autoB06461BF_val == 1) {
            libSCBW_gf_lSetAdjustPointsRankD(lv_n);
        }
        else if (autoB06461BF_val == 2) {
            libSCBW_gf_lSetAdjustPointsRankD(lv_n);
        }
        else if (autoB06461BF_val == 3) {
            libSCBW_gf_lSetAdjustPointsRankD(lv_n);
        }
        else if (autoB06461BF_val == 4) {
            libSCBW_gf_lSetAdjustPointsRankC(lv_n);
        }
        else if (autoB06461BF_val == 5) {
            libSCBW_gf_lSetAdjustPointsRankC(lv_n);
        }
        else if (autoB06461BF_val == 6) {
            libSCBW_gf_lSetAdjustPointsRankC(lv_n);
        }
        else if (autoB06461BF_val == 7) {
            libSCBW_gf_lSetAdjustPointsRankB(lv_n);
        }
        else if (autoB06461BF_val == 8) {
            libSCBW_gf_lSetAdjustPointsRankB(lv_n);
        }
        else if (autoB06461BF_val == 9) {
            libSCBW_gf_lSetAdjustPointsRankB(lv_n);
        }
        else if (autoB06461BF_val == 10) {
            libSCBW_gf_lSetAdjustPointsRankA(lv_n);
        }
        else if (autoB06461BF_val == 11) {
            libSCBW_gf_lSetAdjustPointsRankA(lv_n);
        }
        else if (autoB06461BF_val == 12) {
            libSCBW_gf_lSetAdjustPointsRankA(lv_n);
        }
        else {
        }
        libSCBW_gv_ladderRecord.lv_playerPoints[lv_n][libSCBW_gf_lGetRace(lv_n)] -= FixedToInt(libSCBW_gv_ladderRecord.lv_loserPoints[lv_n]);
        libSCBW_gf_lSaveLadder(lv_n);
        libSCBW_gv_ladderRecord.lv_playerLosses[lv_n][libSCBW_gf_lGetRace(lv_n)] -= 1;
        libSCBW_gv_ladderRecord.lv_playerMatchupStats[lv_n][libSCBW_gf_lGetRace(lv_n)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lv_n))][2] -= 1;
        libSCBW_gv_ladderRecord.lv_playerPoints[lv_n][libSCBW_gf_lGetRace(lv_n)] += FixedToInt(libSCBW_gv_ladderRecord.lv_loserPoints[lv_n]);
        lv_n += 1;
    }
}

void libSCBW_gf_lSetAdjustPointsRank (int lp_player) {
    // Implementation
    if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) <= libSCBW_gf_lGetRating(lp_player))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 100.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 20.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 125.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 15.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) >= (libSCBW_gf_lGetRating(lp_player) + 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 150.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 10.0;
    }
}

void libSCBW_gf_lSetAdjustPointsRankD (int lp_player) {
    // Implementation
    if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) <= (libSCBW_gf_lGetRating(lp_player) - 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 50.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 75.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 75.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 62.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == libSCBW_gf_lGetRating(lp_player))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 100.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 50.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 125.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 37.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 150.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 25.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 175.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 12.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) >= (libSCBW_gf_lGetRating(lp_player) + 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 200.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 12.0;
    }
}

void libSCBW_gf_lSetAdjustPointsRankC (int lp_player) {
    // Implementation
    if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) <= (libSCBW_gf_lGetRating(lp_player) - 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 10.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 150.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 25.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 132.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 50.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 112.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 75.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 93.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == libSCBW_gf_lGetRating(lp_player))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 100.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 75.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 125.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 56.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 150.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 37.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 175.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 18.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) >= (libSCBW_gf_lGetRating(lp_player) + 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 200.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 18.0;
    }
}

void libSCBW_gf_lSetAdjustPointsRankB (int lp_player) {
    // Implementation
    if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) <= (libSCBW_gf_lGetRating(lp_player) - 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 10.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 200.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 25.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 175.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 50.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 150.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 75.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 125.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == libSCBW_gf_lGetRating(lp_player))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 100.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 100.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 125.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 75.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 150.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 50.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 175.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 25.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) >= (libSCBW_gf_lGetRating(lp_player) + 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 200.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 25.0;
    }
}

void libSCBW_gf_lSetAdjustPointsRankA (int lp_player) {
    // Implementation
    if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) <= (libSCBW_gf_lGetRating(lp_player) - 4))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 10.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 280.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 3))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 25.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 242.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 50.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 205.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) - 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 75.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 170.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == libSCBW_gf_lGetRating(lp_player))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 100.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 140.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) == (libSCBW_gf_lGetRating(lp_player) + 1))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 125.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 112.0;
    }
    else if ((libSCBW_gf_lGetRating(libSCBW_gf_lGetOpponent(lp_player)) >= (libSCBW_gf_lGetRating(lp_player) + 2))) {
        libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player] = 150.0;
        libSCBW_gv_ladderRecord.lv_loserPoints[lp_player] = 75.0;
    }
}

bool libSCBW_gf_lCheckPlayerStatus (int lp_player) {
    // Variable Declarations
    bool lv_playerisDefeated;

    // Variable Initialization

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusLeft)) {
        lv_playerisDefeated = true;
    }
    else {
    }
    if ((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_playerisDefeated = true;
    }
    else {
    }
    return lv_playerisDefeated;
}

void libSCBW_gf_lAwardWinner (int lp_player) {
    // Implementation
    libSCBW_gv_ladderRecord.lv_playerWins[lp_player][libSCBW_gf_lGetRace(lp_player)] += 1;
    libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][1] += 1;
    libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][libSCBW_gf_lGetRace(lp_player)] += FixedToInt(libSCBW_gv_ladderRecord.lv_winnerPoints[lp_player]);
}

void libSCBW_gf_lLoseforLoser (int lp_player) {
    // Implementation
    libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][libSCBW_gf_lGetRace(lp_player)] += 1;
    libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][libSCBW_gf_lGetRace(lp_player)][libSCBW_gf_lGetRace(libSCBW_gf_lGetOpponent(lp_player))][2] += 1;
    libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][libSCBW_gf_lGetRace(lp_player)] -= FixedToInt(libSCBW_gv_ladderRecord.lv_loserPoints[lp_player]);
}

void libSCBW_gf_lSaveLadder (int lp_player) {
    // Implementation
    libSCBW_gf_lSaveMatchupStats(lp_player);
    libSCBW_gf_lSaveLadderStats(lp_player);
    BankSave(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player]);
}

void libSCBW_gf_lSaveLadderStats (int lp_player) {
    int auto0A70B9D9_n;
    int auto0A70B9D9_i;
    int auto75A7987E_n;
    int auto75A7987E_i;

    // Variable Declarations
    string lv_encrypt;
    int lv_n;

    // Variable Initialization
    lv_encrypt = "";
    lv_n = 1;

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        BankValueSetFromString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", "PlayerID", libSCBW_gv_ladderRecord.lv_playerID[lp_player]);
        auto75A7987E_n = 3;
        for (auto75A7987E_i = 1; auto75A7987E_i <= auto75A7987E_n; auto75A7987E_i += 1) {
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerLosses" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][lv_n]);
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerWins" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerWins[lp_player][lv_n]);
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadder", ("PlayerPoints" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n]);
            lv_n += 1;
        }
    }
    else {
        BankValueSetFromString(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", "PlayerID", libSCBW_gv_ladderRecord.lv_playerID[lp_player]);
        auto0A70B9D9_n = 3;
        for (auto0A70B9D9_i = 1; auto0A70B9D9_i <= auto0A70B9D9_n; auto0A70B9D9_i += 1) {
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerLosses" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerLosses[lp_player][lv_n]);
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerWins" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerWins[lp_player][lv_n]);
            BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "Ladder", ("PlayerPoints" + IntToString(lv_n)), libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n]);
            lv_n += 1;
        }
    }
}

void libSCBW_gf_lSaveMatchupStats (int lp_player) {
    int auto48781661_n;
    int auto48781661_i;
    int auto74F3F234_n;
    int auto74F3F234_i;
    int autoA4FC6E0C_n;
    int autoA4FC6E0C_i;
    int auto2A9822A2_n;
    int auto2A9822A2_i;
    int auto7C77A9D3_n;
    int auto7C77A9D3_i;
    int auto774A01B1_n;
    int auto774A01B1_i;

    // Variable Declarations
    int lv_n;
    int lv_i;
    int lv_p;
    string lv_encrypt;

    // Variable Initialization
    lv_n = 1;
    lv_i = 1;
    lv_p = 1;
    lv_encrypt = "";

    // Implementation
    if ((libSCBW_gf_lCheckGameMode() == 1)) {
        auto2A9822A2_n = 3;
        for (auto2A9822A2_i = 1; auto2A9822A2_i <= auto2A9822A2_n; auto2A9822A2_i += 1) {
            auto7C77A9D3_n = 3;
            for (auto7C77A9D3_i = 1; auto7C77A9D3_i <= auto7C77A9D3_n; auto7C77A9D3_i += 1) {
                auto774A01B1_n = 2;
                for (auto774A01B1_i = 1; auto774A01B1_i <= auto774A01B1_n; auto774A01B1_i += 1) {
                    BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "HCLadderMatchup", ("MatchupStats" + IntToString(lv_n) + IntToString(lv_i) + IntToString(lv_p)), libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][lv_n][lv_i][lv_p]);
                    lv_p += 1;
                }
                lv_i += 1;
                lv_p = 1;
            }
            lv_i = 1;
            lv_p = 1;
            lv_n += 1;
        }
    }
    else {
        auto48781661_n = 3;
        for (auto48781661_i = 1; auto48781661_i <= auto48781661_n; auto48781661_i += 1) {
            auto74F3F234_n = 3;
            for (auto74F3F234_i = 1; auto74F3F234_i <= auto74F3F234_n; auto74F3F234_i += 1) {
                autoA4FC6E0C_n = 2;
                for (autoA4FC6E0C_i = 1; autoA4FC6E0C_i <= autoA4FC6E0C_n; autoA4FC6E0C_i += 1) {
                    BankValueSetFromInt(libSCBW_gv_ladderRecord.lv_playerBanks[lp_player], "LadderMatchup", ("MatchupStats" + IntToString(lv_n) + IntToString(lv_i) + IntToString(lv_p)), libSCBW_gv_ladderRecord.lv_playerMatchupStats[lp_player][lv_n][lv_i][lv_p]);
                    lv_p += 1;
                }
                lv_i += 1;
                lv_p = 1;
            }
            lv_i = 1;
            lv_p = 1;
            lv_n += 1;
        }
    }
}

void libSCBW_gf_lSaveStartingStats (int lp_player) {
    int autoDD9E49C3_n;
    int autoDD9E49C3_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Implementation
    autoDD9E49C3_n = 3;
    for (autoDD9E49C3_i = 1; autoDD9E49C3_i <= autoDD9E49C3_n; autoDD9E49C3_i += 1) {
        libSCBW_gv_ladderRecord.lv_playerPoints[lp_player][lv_n] = 1000;
        lv_n += 1;
    }
    libSCBW_gv_ladderRecord.lv_playerID[lp_player] = libSCBW_gf_lCreateNewPlayerID();
    libSCBW_gf_lSaveLadder(lp_player);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_Init_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_InitSC2BW();
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("prescue", 0), PlayerGroupAll(), 200.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_Init_Init () {
    libSCBW_gt_Init = TriggerCreate("libSCBW_gt_Init_Func");
    TriggerAddEventTimeElapsed(libSCBW_gt_Init, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Mode Text
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_GameModeText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_buildingSelectionLimit;
    bool lv_unitSelectionLimit;
    bool lv_automine;
    bool lv_smartCast;
    bool lv_bWCamera;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_GenericButton", -1), PlayerGroupAll(), 150.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, libSCBW_gv_version);
    if ((GameAttributeGameValue("1") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_AA568BE3"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_771047C4"));
    }
    if ((GameAttributeGameValue("2") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_B400636E"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_B045273E"));
    }
    if ((GameAttributeGameValue("3") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_21EED327"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_SCBW_0224EF33"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_GameModeText_Init () {
    libSCBW_gt_GameModeText = TriggerCreate("libSCBW_gt_GameModeText_Func");
    TriggerAddEventTimeElapsed(libSCBW_gt_GameModeText, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update every 1 second
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_Updateevery1second_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libSCBW_gv_dialogs.lv_realTimeMissionTimer, FormatDuration(FixedToInt(TimerGetElapsed(libSCBW_gv_otherStats.lv_osMissionTime))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_Updateevery1second_Init () {
    libSCBW_gt_Updateevery1second = TriggerCreate("libSCBW_gt_Updateevery1second_Func");
    TriggerAddEventTimePeriodic(libSCBW_gt_Updateevery1second, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update every 0.0625
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_Updateevery00625_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_CheckAirUnitsToSpread();
    libSCBW_gf_WorkerVariableSpeed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_Updateevery00625_Init () {
    libSCBW_gt_Updateevery00625 = TriggerCreate("libSCBW_gt_Updateevery00625_Func");
    TriggerAddEventTimePeriodic(libSCBW_gt_Updateevery00625, 0.125, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DroppedFromTransport
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DroppedFromTransport_Func (bool testConds, bool runActions) {
    string autoBD8608C5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCargo(), "DroppedFromTransportSpell", EventUnit(), 1);
    autoBD8608C5_val = UnitGetType(EventUnitCargo());
    if (autoBD8608C5_val == "Reaver") {
        UnitBehaviorAdd(EventUnitCargo(), "DroppedFromTransportReaver", EventUnit(), 1);
    }
    else if (autoBD8608C5_val == "Goliath") {
        UnitBehaviorAdd(EventUnitCargo(), "DroppedFromTransportGoliath", EventUnit(), 1);
    }
    else if (autoBD8608C5_val == "SiegeTank") {
        UnitBehaviorAdd(EventUnitCargo(), "DroppedFromTransportTank", EventUnit(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DroppedFromTransport_Init () {
    libSCBW_gt_DroppedFromTransport = TriggerCreate("libSCBW_gt_DroppedFromTransport_Func");
    TriggerAddEventUnitCargo(libSCBW_gt_DroppedFromTransport, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageHydralisk
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageHydralisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "NeedleSpinesDamage", "NeedleSpinesNull", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageHydralisk_Init () {
    libSCBW_gt_DamageHydralisk = TriggerCreate("libSCBW_gt_DamageHydralisk_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageHydralisk, c_playerAny, "NeedleSpinesNull2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageDragoon
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageDragoon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "ParticleDisruptorsU", "ParticleDisruptorsU3", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageDragoon_Init () {
    libSCBW_gt_DamageDragoon = TriggerCreate("libSCBW_gt_DamageDragoon_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageDragoon, c_playerAny, "EntropyLanceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageScarab
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageScarab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "ScarabDamage", "ScarabDamageDummy", libSCBW_ge_DamageModifier_Explosive, false);
    UnitKill(lv_source);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageScarab_Init () {
    libSCBW_gt_DamageScarab = TriggerCreate("libSCBW_gt_DamageScarab_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageScarab, c_playerAny, "ScarabSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageMarine
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageMarine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "GuassRifle", "GuassRifleNull", libSCBW_ge_DamageModifier_None, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageMarine_Init () {
    libSCBW_gt_DamageMarine = TriggerCreate("libSCBW_gt_DamageMarine_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageMarine, c_playerAny, "GuassRifleSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageGhost
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageGhost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "C10CanisterRifle", "C10CanisterRifleNull", libSCBW_ge_DamageModifier_Concussive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageGhost_Init () {
    libSCBW_gt_DamageGhost = TriggerCreate("libSCBW_gt_DamageGhost_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageGhost, c_playerAny, "C10CanisterRifleSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageVulture
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageVulture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "VultureU", "VultureUNull", libSCBW_ge_DamageModifier_Concussive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageVulture_Init () {
    libSCBW_gt_DamageVulture = TriggerCreate("libSCBW_gt_DamageVulture_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageVulture, c_playerAny, "VultureSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageGoliath
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageGoliath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "GoliathG", "GoliathGNull", libSCBW_ge_DamageModifier_None, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageGoliath_Init () {
    libSCBW_gt_DamageGoliath = TriggerCreate("libSCBW_gt_DamageGoliath_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageGoliath, c_playerAny, "GoliathGSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageSiegeTank
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageSiegeTank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "90mmCannons", "ArcliteCannonNullDamage", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageSiegeTank_Init () {
    libSCBW_gt_DamageSiegeTank = TriggerCreate("libSCBW_gt_DamageSiegeTank_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageSiegeTank, c_playerAny, "ArcliteCannonSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageSiegeTankSieged
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageSiegeTankSieged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "CrucioShockCannonDummy", "CrucioShockCannonBlast", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageSiegeTankSieged_Init () {
    libSCBW_gt_DamageSiegeTankSieged = TriggerCreate("libSCBW_gt_DamageSiegeTankSieged_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageSiegeTankSieged, c_playerAny, "CrucioShockCannonSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageSpiderMine
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageSpiderMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "SpiderMineDamage", "SpiderMineNullDamage", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    UnitKill(lv_source);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageSpiderMine_Init () {
    libSCBW_gt_DamageSpiderMine = TriggerCreate("libSCBW_gt_DamageSpiderMine_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageSpiderMine, c_playerAny, "VultureSpiderMinesSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DamageYamato
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DamageYamato_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_source;
    unit lv_target;

    // Variable Initialization
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gf_ApplyDamage(lv_source, lv_target, "YamatoU", "YamatoU2", libSCBW_ge_DamageModifier_Explosive, libSCBW_gf_Miss(lv_source, lv_target));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DamageYamato_Init () {
    libSCBW_gt_DamageYamato = TriggerCreate("libSCBW_gt_DamageYamato_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_DamageYamato, c_playerAny, "YamatoCannonSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WorkerIsCreated
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_WorkerIsCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Probe"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Drone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libSCBW_gv_workers, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_WorkerIsCreated_Init () {
    libSCBW_gt_WorkerIsCreated = TriggerCreate("libSCBW_gt_WorkerIsCreated_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_WorkerIsCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Identify Harvesting
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_IdentifyHarvesting_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "IdentifyHarvesting", 0, 1);
    UnitGroupAdd(libSCBW_gv_beingHarvested, EventUnitTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_IdentifyHarvesting_Init () {
    libSCBW_gt_IdentifyHarvesting = TriggerCreate("libSCBW_gt_IdentifyHarvesting_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_IdentifyHarvesting, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageHarvest, false);
    TriggerAddEventUnitAbility(libSCBW_gt_IdentifyHarvesting, null, AbilityCommand("ProbeHarvest", 0), c_abilHarvestStageHarvest, false);
    TriggerAddEventUnitAbility(libSCBW_gt_IdentifyHarvesting, null, AbilityCommand("DroneHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finished Harvesting
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_FinishedHarvesting_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MineralField") || (UnitGetType(EventUnit()) == "MineralFieldSpecial")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libSCBW_gv_beingHarvested, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_FinishedHarvesting_Init () {
    libSCBW_gt_FinishedHarvesting = TriggerCreate("libSCBW_gt_FinishedHarvesting_Func");
    TriggerAddEventUnitProperty(libSCBW_gt_FinishedHarvesting, null, c_unitPropResources);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Wait at Resource
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisableWaitatResource_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "MineralField"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if (((UnitHasBehavior(EventUnit(), "IdentifyHarvesting") == false) && (libSCBW_gf_FreeMineralPatchNearby(EventUnit()) == true))) {
        if ((UnitGetType(EventUnit()) == "SCV")) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
        }
        else if ((UnitGetType(EventUnit()) == "Drone")) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
        }
        else if ((UnitGetType(EventUnit()) == "Probe")) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisableWaitatResource_Init () {
    libSCBW_gt_DisableWaitatResource = TriggerCreate("libSCBW_gt_DisableWaitatResource_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_DisableWaitatResource, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageWaitAtResource, false);
    TriggerAddEventUnitAbility(libSCBW_gt_DisableWaitatResource, null, AbilityCommand("ProbeHarvest", 0), c_abilHarvestStageWaitAtResource, false);
    TriggerAddEventUnitAbility(libSCBW_gt_DisableWaitatResource, null, AbilityCommand("DroneHarvest", 0), c_abilHarvestStageWaitAtResource, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralFieldSpecial
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_MineralFieldSpecial_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CarryMineralFieldMineralsSpecial", 1);
    UnitSetPropertyFixed(EventUnit(), c_unitPropCarriedMinerals, 0.0);
    if ((UnitGetType(EventUnit()) == "SCV")) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralFieldSpecial", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
    }
    else if ((UnitGetType(EventUnit()) == "Drone")) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralFieldSpecial", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
    }
    else if ((UnitGetType(EventUnit()) == "Probe")) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(UnitGroup("MineralFieldSpecial", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_MineralFieldSpecial_Init () {
    libSCBW_gt_MineralFieldSpecial = TriggerCreate("libSCBW_gt_MineralFieldSpecial_Func");
    TriggerAddEventUnitBehaviorChange(libSCBW_gt_MineralFieldSpecial, null, "CarryMineralFieldMineralsSpecial", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Reveal
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_AttackReveal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnit()), UnitGetOwner(EventUnitTarget()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitTarget(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnitTarget()), 1.5), 1.5, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_AttackReveal_Init () {
    libSCBW_gt_AttackReveal = TriggerCreate("libSCBW_gt_AttackReveal_Func");
    TriggerAddEventUnitAttacked(libSCBW_gt_AttackReveal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Issued
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_PatrolIssued_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;

    // Variable Initialization
    lv_order = EventUnitOrder();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "MovingShotActivateTurret", UnitGetOwner(EventUnit()), 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 1), OrderGetTargetPosition(lv_order)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_PatrolIssued_Init () {
    libSCBW_gt_PatrolIssued = TriggerCreate("libSCBW_gt_PatrolIssued_Func");
    TriggerAddEventUnitOrder(libSCBW_gt_PatrolIssued, null, AbilityCommand("VulturePatrol", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScarabPathing
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_ScarabPathing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point1;
    point lv_point2;
    int lv_nomovementcount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_point1 = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        Wait(0.0625, c_timeGame);
        lv_point2 = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        if ((DistanceBetweenPoints(lv_point1, lv_point2) < 0.03)) {
            lv_nomovementcount += 1;
        }
        else {
        }
        if ((lv_nomovementcount >= 10)) {
            UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("ScarabSmart", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("ScarabDumb", 0)), c_orderQueueAddToFront);
            lv_nomovementcount = 0;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_ScarabPathing_Init () {
    libSCBW_gt_ScarabPathing = TriggerCreate("libSCBW_gt_ScarabPathing_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_ScarabPathing, c_playerAny, "ScarabFiredApplyIdentify");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LimitActiveScarabs
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_LimitActiveScarabs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == false))) {
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ScarabFired", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_LimitActiveScarabs_Init () {
    libSCBW_gt_LimitActiveScarabs = TriggerCreate("libSCBW_gt_LimitActiveScarabs_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_LimitActiveScarabs, c_playerAny, "ScarabFiredApplyIdentify");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CarrierCreated
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CarrierCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_stoploop;
    int lv_n;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "CarrierSC2BW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_stoploop == false)) {
        if ((libSCBW_gv_carriers[lv_n][0] == null)) {
            libSCBW_gv_carriers[lv_n][0] = EventUnitCreatedUnit();
            UnitSetCustomValue(EventUnitCreatedUnit(), 3, lv_n);
            lv_stoploop = true;
        }
        else {
            lv_n += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CarrierCreated_Init () {
    libSCBW_gt_CarrierCreated = TriggerCreate("libSCBW_gt_CarrierCreated_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_CarrierCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InterceptorCreated
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_InterceptorCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_stoploop;
    bool lv_stoploop2;
    int lv_n;
    int lv_o;
    fixed lv_carrierArrayIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Interceptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_carrierArrayIndex = UnitGetCustomValue(EventUnit(), 3);
    if ((libSCBW_gv_carriers[FixedToInt(lv_carrierArrayIndex)][0] == EventUnit())) {
        while ((lv_o <= 8) && (lv_stoploop == false)) {
            if ((UnitIsValid(libSCBW_gv_carriers[FixedToInt(lv_carrierArrayIndex)][lv_o]) == false)) {
                libSCBW_gv_carriers[FixedToInt(lv_carrierArrayIndex)][lv_o] = null;
            }
            else {
            }
            if ((libSCBW_gv_carriers[FixedToInt(lv_carrierArrayIndex)][lv_o] == null)) {
                libSCBW_gv_carriers[FixedToInt(lv_carrierArrayIndex)][lv_o] = EventUnitCreatedUnit();
                lv_stoploop = true;
            }
            else {
                lv_o += 1;
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_InterceptorCreated_Init () {
    libSCBW_gt_InterceptorCreated = TriggerCreate("libSCBW_gt_InterceptorCreated_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_InterceptorCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CarrierOrderedToAttack
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CarrierOrderedToAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_stoploop;
    int lv_n;
    int lv_o;
    int lv_carrierArrayIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CarrierSC2BW"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_carrierArrayIndex = FixedToInt(UnitGetCustomValue(EventUnit(), 3));
    if ((libSCBW_gv_carriers[lv_carrierArrayIndex][0] == EventUnit())) {
        while ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 14.0) && (lv_stoploop == false) && (lv_o <= 8)) {
            UnitIssueOrder(libSCBW_gv_carriers[lv_carrierArrayIndex][lv_o], OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(EventUnitOrder())), c_orderQueueReplace);
            lv_o += 1;
        }
        lv_stoploop = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CarrierOrderedToAttack_Init () {
    libSCBW_gt_CarrierOrderedToAttack = TriggerCreate("libSCBW_gt_CarrierOrderedToAttack_Func");
    TriggerAddEventUnitOrder(libSCBW_gt_CarrierOrderedToAttack, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CarrierLoop
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CarrierLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_i;
    int lv_o;
    int lv_carrierArrayIndex;
    unit lv_selectedInterceptor;
    unit lv_selectedCarrier;

    // Variable Initialization
    lv_o = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        UnitGroupLoopBegin(UnitGroup("CarrierSC2BW", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_o = 1;
            lv_carrierArrayIndex = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 3));
            lv_selectedCarrier = libSCBW_gv_carriers[lv_carrierArrayIndex][0];
            while ((lv_o <= 8)) {
                lv_selectedInterceptor = libSCBW_gv_carriers[lv_carrierArrayIndex][lv_o];
                if ((libSCBW_gv_carriers[lv_carrierArrayIndex][lv_o] != null) && (DistanceBetweenPoints(UnitGetPosition(lv_selectedCarrier), UnitGetPosition(lv_selectedInterceptor)) <= 1.5) && (UnitHasBehavior(lv_selectedCarrier, "CarrierIsMoving") == true)) {
                    UnitSetPosition(lv_selectedInterceptor, PointWithOffsetPolar(UnitGetPosition(lv_selectedCarrier), 1.8, AngleBetweenPoints(UnitGetPosition(lv_selectedCarrier), UnitGetPosition(lv_selectedInterceptor))), true);
                }
                else {
                }
                lv_o += 1;
            }
        }
        UnitGroupLoopEnd();
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CarrierLoop_Init () {
    libSCBW_gt_CarrierLoop = TriggerCreate("libSCBW_gt_CarrierLoop_Func");
    TriggerAddEventMapInit(libSCBW_gt_CarrierLoop);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nydus Creates Exit
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_NydusCreatesExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_entrance;
    unit lv_exit;
    bool lv_break;
    int lv_n;

    // Variable Initialization
    lv_entrance = EventUnit();
    lv_exit = EventUnitCreatedUnit();
    lv_n = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_break == false) && (lv_n <= 100)) {
        if ((UnitGetType(EventUnitCreatedUnit()) == "NydusCanal") && ((UnitIsAlive(libSCBW_gv_nydusLink[lv_n][0]) == false) || (UnitIsAlive(libSCBW_gv_nydusLink[lv_n][1]) == false))) {
            libSCBW_gv_nydusLink[lv_n][0] = lv_entrance;
            libSCBW_gv_nydusLink[lv_n][1] = lv_exit;
            lv_break = true;
        }
        else {
            lv_n += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_NydusCreatesExit_Init () {
    libSCBW_gt_NydusCreatesExit = TriggerCreate("libSCBW_gt_NydusCreatesExit_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_NydusCreatesExit, null, "BuildNydusCanal", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Nydus
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_UnitEntersNydus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_break;
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "NydusNetwork") || (UnitGetType(EventUnit()) == "NydusCanal"))) {
        while ((lv_break == false) && (lv_n <= 100)) {
            if (((EventUnit() == libSCBW_gv_nydusLink[lv_n][0]) || (EventUnit() == libSCBW_gv_nydusLink[lv_n][1]))) {
                lv_break = true;
                if ((UnitGetType(EventUnit()) == "NydusNetwork")) {
                    UnitIssueOrder(libSCBW_gv_nydusLink[lv_n][1], Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(libSCBW_gv_nydusLink[lv_n][0], Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
                }
            }
            else {
                lv_n += 1;
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_UnitEntersNydus_Init () {
    libSCBW_gt_UnitEntersNydus = TriggerCreate("libSCBW_gt_UnitEntersNydus_Func");
    TriggerAddEventUnitCargo(libSCBW_gt_UnitEntersNydus, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exit Dies
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_ExitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_break;
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "NydusCanal") || (UnitGetType(EventUnit()) == "NydusNetwork")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_break == false) && (lv_n <= 100)) {
        if (((EventUnit() == libSCBW_gv_nydusLink[lv_n][1]) || (EventUnit() == libSCBW_gv_nydusLink[lv_n][0]))) {
            lv_break = true;
            UnitKill(libSCBW_gv_nydusLink[lv_n][0]);
            UnitKill(libSCBW_gv_nydusLink[lv_n][1]);
            libSCBW_gv_nydusLink[lv_n][0] = null;
            libSCBW_gv_nydusLink[lv_n][1] = null;
        }
        else {
            lv_n += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_ExitDies_Init () {
    libSCBW_gt_ExitDies = TriggerCreate("libSCBW_gt_ExitDies_Func");
    TriggerAddEventUnitDied(libSCBW_gt_ExitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Uses Battery
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_UnitUsesBattery_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "ShieldBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0)) {
        while (!((DistanceBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), UnitGetPosition(EventUnit())) <= 5.0))) {
            Wait(0.0625, c_timeGame);
        }
        UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingUnit(AbilityCommand("RechargeShields", 0), EventUnit()), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_UnitUsesBattery_Init () {
    libSCBW_gt_UnitUsesBattery = TriggerCreate("libSCBW_gt_UnitUsesBattery_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_UnitUsesBattery, null, AbilityCommand("move", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moving Shot
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_MovingShot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitfacingangle;
    fixed lv_angleofTarget;
    point lv_order;
    int lv_ownerofTriggeringUnit;
    int lv_ownerofTarget;

    // Variable Initialization
    lv_order = OrderGetTargetPosition(UnitOrder(EventUnit(), 0));

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Vulture")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitfacingangle = UnitGetFacing(EventUnit());
    lv_angleofTarget = AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_AcquiredTarget()));
    lv_ownerofTarget = UnitGetOwner(libNtve_gf_AcquiredTarget());
    lv_ownerofTriggeringUnit = UnitGetOwner(EventUnit());
    if (((UnitIsAlive(EventUnit()) == true) && (lv_angleofTarget < (lv_unitfacingangle + 90.0)) && (lv_angleofTarget > (lv_unitfacingangle - 90.0)) && (!((lv_ownerofTarget == lv_ownerofTriggeringUnit))))) {
        UnitBehaviorAddPlayer(EventUnit(), "MovingShotActivateTurret", UnitGetOwner(EventUnit()), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_MovingShot_Init () {
    libSCBW_gt_MovingShot = TriggerCreate("libSCBW_gt_MovingShot_Func");
    TriggerAddEventUnitAcquiredTarget(libSCBW_gt_MovingShot, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Mine Detect Cloaked
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_SpiderMineDetectCloaked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "SCV"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "Drone"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "DroneBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "Probe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "SpiderMine") && (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "SpiderMineBurrowed") && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true) && (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitTarget), RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.35)) == true)) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
        if ((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitTarget), RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropRadius, c_unitPropCurrent) + 0.55))) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
            Wait(0.1, c_timeGame);
            if ((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitTarget), RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropRadius, c_unitPropCurrent) + 0.65))) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "VultureSpiderMinesSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_SpiderMineDetectCloaked_Init () {
    libSCBW_gt_SpiderMineDetectCloaked = TriggerCreate("libSCBW_gt_SpiderMineDetectCloaked_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_SpiderMineDetectCloaked, c_playerAny, "SpiderMineSearchAreaTriggered");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scarab becomes idle
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_Scarabbecomesidle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "WeaponReaverScarabDumb"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_Scarabbecomesidle_Init () {
    libSCBW_gt_Scarabbecomesidle = TriggerCreate("libSCBW_gt_Scarabbecomesidle_Func");
    TriggerAddEventUnitBecomesIdle(libSCBW_gt_Scarabbecomesidle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove when Shield Depleted
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_RemovewhenShieldDepleted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) == 0.0))) {
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(EventUnitTargetUnit(), "DefensiveMatrix", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_RemovewhenShieldDepleted_Init () {
    libSCBW_gt_RemovewhenShieldDepleted = TriggerCreate("libSCBW_gt_RemovewhenShieldDepleted_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_RemovewhenShieldDepleted, null, AbilityCommand("DefensiveMatrix2", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libSCBW_gt_RemovewhenShieldDepleted, null, AbilityCommand("DefensiveMatrixHardcore", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infest Used
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_InfestUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) == "CommandCenterFlying")) {
        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfestedCommandCenterFlying", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    else {
        libNtve_gf_ReplaceUnit(EventUnitTargetUnit(), "InfestedCommandCenter", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    }
    UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "Infest", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_InfestUsed_Init () {
    libSCBW_gt_InfestUsed = TriggerCreate("libSCBW_gt_InfestUsed_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_InfestUsed, null, AbilityCommand("Infest", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grant Vision
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_GrantVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_targetUnit;
    fixed lv_targetUnitSight;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetUnitSight = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_targetUnit)), "Sight", c_playerAny));
    while ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Parasite") == true)) {
        if ((UnitFilterMatch(lv_targetUnit, lv_player, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_targetUnit), lv_targetUnitSight), 0.5, false);
        }
        else {
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_targetUnit), lv_targetUnitSight), 0.5, true);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_GrantVision_Init () {
    libSCBW_gt_GrantVision = TriggerCreate("libSCBW_gt_GrantVision_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_GrantVision, c_playerAny, "ParasiteApply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hallucination
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_Hallucination_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_temp_Unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_temp_Unit = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libNtve_gf_CreateUnitsAtPoint2(1, lv_temp_Unit, 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    UnitBehaviorAdd(UnitLastCreated(), "HallucinationTimedLifeCustom", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitBehaviorAdd(UnitLastCreated(), "HallucinationHighTemplar", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_temp_Unit, 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    UnitBehaviorAdd(UnitLastCreated(), "HallucinationTimedLifeCustom", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitBehaviorAdd(UnitLastCreated(), "HallucinationHighTemplar", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_Hallucination_Init () {
    libSCBW_gt_Hallucination = TriggerCreate("libSCBW_gt_Hallucination_Func");
    TriggerAddEventPlayerEffectUsed(libSCBW_gt_Hallucination, c_playerAny, "HallucinationDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Limit Selection
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_LimitSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_i;
    bool lv_buildingFound;

    // Variable Initialization
    lv_n = 1;
    lv_i = UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive);

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("1") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_buildingFound == false) && (lv_n <= lv_i)) {
        if ((UnitFilterMatch(UnitGroupUnit(UnitGroupSelected(EventPlayer()), lv_n), EventPlayer(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            lv_buildingFound = true;
            libSCBW_gf_Deselect1Building(EventPlayer());
        }
        else {
        }
        lv_n += 1;
    }
    lv_n = 1;
    if ((lv_buildingFound == false) && (lv_i > 12)) {
        libSCBW_gf_Deselect12Units(EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_LimitSelection_Init () {
    libSCBW_gt_LimitSelection = TriggerCreate("libSCBW_gt_LimitSelection_Func");
    TriggerAddEventUnitSelected(libSCBW_gt_LimitSelection, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTRL - 12 Unit Limit on Control Groups
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CTRL12UnitLimitonControlGroups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;
    int lv_group;
    int lv_player;

    // Variable Initialization
    lv_n = 1;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("1") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_group = ((EventKeyPressed()) - 3);
    UnitGroupClear(libSCBW_gv_controlGroups[lv_player][lv_group]);
    libSCBW_gv_controlGroups[lv_player][lv_group] = UnitGroupSelected(lv_player);
    if ((UnitGroupCount(libSCBW_gv_controlGroups[lv_player][lv_group], c_unitCountAlive) > 12)) {
        while ((UnitGroupCount(libSCBW_gv_controlGroups[lv_player][lv_group], c_unitCountAlive) > 12)) {
            UnitGroupRemove(libSCBW_gv_controlGroups[lv_player][lv_group], UnitGroupUnit(libSCBW_gv_controlGroups[lv_player][lv_group], UnitGroupCount(libSCBW_gv_controlGroups[lv_player][lv_group], c_unitCountAlive)));
            UnitControlGroupRemoveUnit(lv_player, lv_group, UnitGroupUnit(libSCBW_gv_controlGroups[lv_player][lv_group], UnitGroupCount(libSCBW_gv_controlGroups[lv_player][lv_group], c_unitCountAlive)));
        }
    }
    else {
    }
    libSCBW_gf_CheckBuildingLarvaEgg(lv_player, lv_group);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CTRL12UnitLimitonControlGroups_Init () {
    libSCBW_gt_CTRL12UnitLimitonControlGroups = TriggerCreate("libSCBW_gt_CTRL12UnitLimitonControlGroups_Func");
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key2, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key3, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key4, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key5, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key6, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key7, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key8, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key9, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key0, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key1, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key2, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key3, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key4, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key5, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key6, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key7, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key8, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key9, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_CTRL12UnitLimitonControlGroups, c_playerAny, c_key0, false, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SHIFT - 12 Unit Limit on Control Groups
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_SHIFT12UnitLimitonControlGroups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;
    int lv_n;
    int lv_i;
    int lv_group;
    int lv_player;

    // Variable Initialization
    lv_units = UnitGroupEmpty();
    lv_n = 1;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("1") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_group = ((EventKeyPressed()) - 3);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupSelected(lv_player), lv_units);
    while ((lv_i <= UnitGroupCount(lv_units, c_unitCountAlive))) {
        if ((UnitGroupCount(libSCBW_gv_controlGroups[lv_player][lv_group], c_unitCountAlive) < 12)) {
            UnitGroupAdd(libSCBW_gv_controlGroups[lv_player][lv_group], UnitGroupUnit(lv_units, lv_i));
            UnitControlGroupAddUnit(lv_player, lv_group, UnitGroupUnit(lv_units, lv_i));
        }
        else {
            if ((UnitGroupHasUnit(libSCBW_gv_controlGroups[lv_player][lv_group], UnitGroupUnit(lv_units, lv_i)) == false)) {
                UnitControlGroupRemoveUnit(lv_player, lv_group, UnitGroupUnit(lv_units, lv_i));
            }
            else {
            }
        }
        lv_i += 1;
    }
    libSCBW_gf_CheckBuildingLarvaEgg(lv_player, lv_group);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_SHIFT12UnitLimitonControlGroups_Init () {
    libSCBW_gt_SHIFT12UnitLimitonControlGroups = TriggerCreate("libSCBW_gt_SHIFT12UnitLimitonControlGroups_Func");
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key1, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key2, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key3, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key4, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key5, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key6, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key7, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key8, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key9, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key0, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key1, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key2, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key3, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key4, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key5, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key6, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key7, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key8, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key9, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libSCBW_gt_SHIFT12UnitLimitonControlGroups, c_playerAny, c_key0, false, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Automine
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisableAutomine_Func (bool testConds, bool runActions) {
    int auto2431D3EC_n;
    int auto2431D3EC_i;

    // Variable Declarations
    unit lv_orderTarget;
    int lv_n;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((GameAttributeGameValue("2") == "0002") && ((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "Probe"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2431D3EC_n = 4;
    for (auto2431D3EC_i = 1; auto2431D3EC_i <= auto2431D3EC_n; auto2431D3EC_i += 1) {
        lv_orderTarget = OrderGetTargetUnit(UnitOrder(EventUnitCreatedUnit(), lv_n));
        if ((UnitGetType(lv_orderTarget) == "MineralField")) {
            UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingUnit(AbilityCommand("move", 0), lv_orderTarget), c_orderQueueReplace);
        }
        else {
        }
        lv_n += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisableAutomine_Init () {
    libSCBW_gt_DisableAutomine = TriggerCreate("libSCBW_gt_DisableAutomine_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_DisableAutomine, null, "CommandCenterTrain", null);
    TriggerAddEventUnitCreated(libSCBW_gt_DisableAutomine, null, "LarvaTrain", null);
    TriggerAddEventUnitCreated(libSCBW_gt_DisableAutomine, null, "NexusTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Rally/Idle Worker Button
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisableRallyIdleWorkerButton_Func (bool testConds, bool runActions) {
    int autoEC634228_n;
    int autoEC634228_i;

    // Variable Declarations
    int lv_n;
    int lv_i;

    // Variable Initialization
    lv_n = 1;
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    autoEC634228_n = 14;
    for (autoEC634228_i = 1; autoEC634228_i <= autoEC634228_n; autoEC634228_i += 1) {
        TechTreeAbilityAllow(lv_n, AbilityCommand("EggRally", 0), false);
        lv_n += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisableRallyIdleWorkerButton_Init () {
    libSCBW_gt_DisableRallyIdleWorkerButton = TriggerCreate("libSCBW_gt_DisableRallyIdleWorkerButton_Func");
    TriggerAddEventMapInit(libSCBW_gt_DisableRallyIdleWorkerButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Smart Cast
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisableSmartCast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("3") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("PsiStorm", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("StasisField", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Maelstrom", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("MindControl2", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("DarkSwarm", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Plague", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("DisruptionWeb", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("TacNukeStrike", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Lockdown", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("OpticalFlare", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Restoration", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Ensnare", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Parasite", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("SpawnBroodling", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("DefensiveMatrix2", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("EMP", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Irradiate", 0), false);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("Repair", 0), false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisableSmartCast_Init () {
    libSCBW_gt_DisableSmartCast = TriggerCreate("libSCBW_gt_DisableSmartCast_Func");
    TriggerAddEventMapInit(libSCBW_gt_DisableSmartCast);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Forced Rally
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_ZergForcedRally_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0002"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libSCBW_gv_breakForcedRallyInfiniteLoop, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libSCBW_gv_breakForcedRallyInfiniteLoop, EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("HatcheryRallyHC", 1), EventUnitTargetPoint()), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("RallyHatchery", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    Wait(0.0625, c_timeGame);
    UnitGroupRemove(libSCBW_gv_breakForcedRallyInfiniteLoop, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_ZergForcedRally_Init () {
    libSCBW_gt_ZergForcedRally = TriggerCreate("libSCBW_gt_ZergForcedRally_Func");
    TriggerAddEventUnitAbility(libSCBW_gt_ZergForcedRally, null, AbilityCommand("RallyHatchery", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libSCBW_gt_ZergForcedRally, null, AbilityCommand("RallyHatchery", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libSCBW_gt_ZergForcedRally, null, AbilityCommand("HatcheryRallyHC", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Best Unit Larva Morph Ability
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisableBestUnitLarvaMorphAbility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("1") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 7), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 0), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 3), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 4), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 2), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 8), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 13), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 5), false);
        TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("LarvaTrain", 1), false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisableBestUnitLarvaMorphAbility_Init () {
    libSCBW_gt_DisableBestUnitLarvaMorphAbility = TriggerCreate("libSCBW_gt_DisableBestUnitLarvaMorphAbility_Func");
    TriggerAddEventMapInit(libSCBW_gt_DisableBestUnitLarvaMorphAbility);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AirUnitCreated
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_AirUnitCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Mutalisk") || (UnitGetType(EventUnitCreatedUnit()) == "Wraith") || (UnitGetType(EventUnitCreatedUnit()) == "VikingFighter") || (UnitGetType(EventUnitCreatedUnit()) == "Phoenix") || (UnitGetType(EventUnitCreatedUnit()) == "Scout") || (UnitGetType(EventUnitCreatedUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libSCBW_gv_airUnits, EventUnitCreatedUnit());
    UnitBehaviorAdd(EventUnitCreatedUnit(), "AirStackCheck", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_AirUnitCreated_Init () {
    libSCBW_gt_AirUnitCreated = TriggerCreate("libSCBW_gt_AirUnitCreated_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_AirUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Comsat Gains 50 Energy on Completion
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_ComsatGains50EnergyonCompletion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ComsatStation2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropEnergy, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_ComsatGains50EnergyonCompletion_Init () {
    libSCBW_gt_ComsatGains50EnergyonCompletion = TriggerCreate("libSCBW_gt_ComsatGains50EnergyonCompletion_Func");
    TriggerAddEventUnitCreated(libSCBW_gt_ComsatGains50EnergyonCompletion, null, "CCAddOns", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable "Pushing"
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_DisablePushing_Func (bool testConds, bool runActions) {
    int auto47D3A993_n;
    int auto47D3A993_i;
    int auto60B0DD07_n;
    int auto60B0DD07_i;

    // Variable Declarations
    int lv_n;
    int lv_i;

    // Variable Initialization
    lv_n = 1;
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto47D3A993_n = 14;
    for (auto47D3A993_i = 1; auto47D3A993_i <= auto47D3A993_n; auto47D3A993_i += 1) {
        auto60B0DD07_n = 14;
        for (auto60B0DD07_i = 1; auto60B0DD07_i <= auto60B0DD07_n; auto60B0DD07_i += 1) {
            PlayerSetAlliance(lv_n, c_allianceIdPushable, lv_i, false);
            lv_i += 1;
        }
        lv_i = 1;
        lv_n += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_DisablePushing_Init () {
    libSCBW_gt_DisablePushing = TriggerCreate("libSCBW_gt_DisablePushing_Func");
    TriggerAddEventMapInit(libSCBW_gt_DisablePushing);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckMovementThreads
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CheckMovementThreads_Func (bool testConds, bool runActions) {
    int autoCCE4E436_n;
    int autoCCE4E436_i;

    // Variable Declarations
    unitgroup lv_allunits;
    int lv_start;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_allunits = UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCCE4E436_n = libNtve_gf_ArithmeticIntClamp(CeilingI((UnitGroupCount(lv_allunits, c_unitCountAlive) / 25.0)), 1, 100);
        for (autoCCE4E436_i = 1; autoCCE4E436_i <= autoCCE4E436_n; autoCCE4E436_i += 1) {
            libSCBW_gf_CheckMovement(PlayerGroupLoopCurrent(), lv_start, lv_allunits);
            lv_start += 25;
        }
        lv_start = 0;
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CheckMovementThreads_Init () {
    libSCBW_gt_CheckMovementThreads = TriggerCreate("libSCBW_gt_CheckMovementThreads_Func");
    TriggerAddEventTimePeriodic(libSCBW_gt_CheckMovementThreads, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LadderInit
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_LadderInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSCBW_gv_ladderRecord.lv_ladderInitialized = true;
    libSCBW_gf_lSetGameMode();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText(libSCBW_gv_ladderRecord.lv_gamemodeName) + StringExternal("Param/Value/lib_SCBW_C106686C")));
    libSCBW_gf_lInit(1);
    libSCBW_gf_lInit(2);
    libSCBW_gf_sStatsInit();
    TriggerEnable(libSCBW_gt_CheckPlayerStatus, true);
    TriggerEnable(libSCBW_gt_osUpdateStats, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_LadderInit_Init () {
    libSCBW_gt_LadderInit = TriggerCreate("libSCBW_gt_LadderInit_Func");
    TriggerEnable(libSCBW_gt_LadderInit, false);
    TriggerAddEventTimeElapsed(libSCBW_gt_LadderInit, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: sOpenStatsButtonPressed
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_sOpenStatsButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libSCBW_gv_dialogs.lv_openStatsButton[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerType(EventPlayer()) == c_playerTypeUser)) {
        lv_player = EventPlayer();
    }
    else {
    }
    if ((libSCBW_gv_dialogconstants.lv_statsDialogOpen[EventPlayer()] == false)) {
        libSCBW_gv_dialogconstants.lv_statsDialogOpen[EventPlayer()] = true;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), lv_player, false);
    }
    else {
        libSCBW_gv_dialogconstants.lv_statsDialogOpen[EventPlayer()] = false;
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_sOpenStatsButtonPressed_Init () {
    libSCBW_gt_sOpenStatsButtonPressed = TriggerCreate("libSCBW_gt_sOpenStatsButtonPressed_Func");
    TriggerAddEventDialogControl(libSCBW_gt_sOpenStatsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: sStatsDialogButtonPressed
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_sStatsDialogButtonPressed_Func (bool testConds, bool runActions) {
    int autoA2785116_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[1][EventPlayer()]) || (EventDialogControl() == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[2][EventPlayer()]) || (EventDialogControl() == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[3][EventPlayer()]) || (EventDialogControl() == libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[1][EventPlayer()]) || (EventDialogControl() == libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[2][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2785116_val = EventDialogControl();
    if (autoA2785116_val == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[1][EventPlayer()]) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[EventPlayer()] = 1;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[EventPlayer()], true);
    }
    else if (autoA2785116_val == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[2][EventPlayer()]) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[EventPlayer()] = 2;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[EventPlayer()], true);
    }
    else if (autoA2785116_val == libSCBW_gv_dialogs.lv_statsDialogRaceButtons[3][EventPlayer()]) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[EventPlayer()] = 3;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[EventPlayer()], true);
    }
    else if (autoA2785116_val == libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[1][EventPlayer()]) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[EventPlayer()] = libSCBW_gf_lGetRace(1);
        libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[EventPlayer()] = 1;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), 1, true);
    }
    else if (autoA2785116_val == libSCBW_gv_dialogs.lv_statsDialogPlayerButtons[2][EventPlayer()]) {
        DialogDestroy(libSCBW_gv_dialogs.lv_statsDialog[EventPlayer()]);
        libSCBW_gv_dialogconstants.lv_statsSelectedRace[EventPlayer()] = libSCBW_gf_lGetRace(2);
        libSCBW_gv_dialogconstants.lv_statsSelectedPlayer[EventPlayer()] = 2;
        libSCBW_gf_sCreateStatsDialog(50, 50, c_anchorTopLeft, EventPlayer(), 2, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_sStatsDialogButtonPressed_Init () {
    libSCBW_gt_sStatsDialogButtonPressed = TriggerCreate("libSCBW_gt_sStatsDialogButtonPressed_Func");
    TriggerAddEventDialogControl(libSCBW_gt_sStatsDialogButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: osUpdateStats
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_osUpdateStats_Func (bool testConds, bool runActions) {
    int auto382C6BD0_n;
    int auto382C6BD0_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto382C6BD0_n = 2;
    for (auto382C6BD0_i = 1; auto382C6BD0_i <= auto382C6BD0_n; auto382C6BD0_i += 1) {
        libSCBW_gf_osUpdateStats(lv_n);
        libSCBW_gf_osSaveStats(lv_n);
        lv_n += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_osUpdateStats_Init () {
    libSCBW_gt_osUpdateStats = TriggerCreate("libSCBW_gt_osUpdateStats_Func");
    TriggerEnable(libSCBW_gt_osUpdateStats, false);
    TriggerAddEventTimePeriodic(libSCBW_gt_osUpdateStats, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Player Status
//--------------------------------------------------------------------------------------------------
bool libSCBW_gt_CheckPlayerStatus_Func (bool testConds, bool runActions) {
    int auto32B6CBDE_n;
    int auto32B6CBDE_i;

    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1;

    // Conditions
    if (testConds) {
        if (!((libSCBW_gv_ladderRecord.lv_victoryDecided == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto32B6CBDE_n = 2;
    for (auto32B6CBDE_i = 1; auto32B6CBDE_i <= auto32B6CBDE_n; auto32B6CBDE_i += 1) {
        if ((libSCBW_gf_lCheckPlayerStatus(lv_n) == true) && (libSCBW_gv_ladderRecord.lv_victoryDecided == false)) {
            libSCBW_gv_ladderRecord.lv_victoryDecided = true;
            libSCBW_gf_lAwardWinner(libSCBW_gf_lGetOpponent(lv_n));
            libSCBW_gf_lLoseforLoser(lv_n);
            libSCBW_gf_lSaveLadder(libSCBW_gf_lGetOpponent(lv_n));
            libSCBW_gf_lDisplayLadderRating(libSCBW_gf_lGetOpponent(lv_n));
            libSCBW_gf_lDisplayLadderRating(lv_n);
            GameOver(lv_n, c_gameOverDefeat, true, true);
            GameOver(libSCBW_gf_lGetOpponent(lv_n), c_gameOverVictory, true, true);
            TriggerEnable(libSCBW_gt_osUpdateStats, false);
        }
        else {
        }
        lv_n += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCBW_gt_CheckPlayerStatus_Init () {
    libSCBW_gt_CheckPlayerStatus = TriggerCreate("libSCBW_gt_CheckPlayerStatus_Func");
    TriggerEnable(libSCBW_gt_CheckPlayerStatus, false);
    TriggerAddEventTimePeriodic(libSCBW_gt_CheckPlayerStatus, 1.0, c_timeGame);
}

void libSCBW_InitTriggers () {
    libSCBW_gt_Init_Init();
    libSCBW_gt_GameModeText_Init();
    libSCBW_gt_Updateevery1second_Init();
    libSCBW_gt_Updateevery00625_Init();
    libSCBW_gt_DroppedFromTransport_Init();
    libSCBW_gt_DamageHydralisk_Init();
    libSCBW_gt_DamageDragoon_Init();
    libSCBW_gt_DamageScarab_Init();
    libSCBW_gt_DamageMarine_Init();
    libSCBW_gt_DamageGhost_Init();
    libSCBW_gt_DamageVulture_Init();
    libSCBW_gt_DamageGoliath_Init();
    libSCBW_gt_DamageSiegeTank_Init();
    libSCBW_gt_DamageSiegeTankSieged_Init();
    libSCBW_gt_DamageSpiderMine_Init();
    libSCBW_gt_DamageYamato_Init();
    libSCBW_gt_WorkerIsCreated_Init();
    libSCBW_gt_IdentifyHarvesting_Init();
    libSCBW_gt_FinishedHarvesting_Init();
    libSCBW_gt_DisableWaitatResource_Init();
    libSCBW_gt_MineralFieldSpecial_Init();
    libSCBW_gt_AttackReveal_Init();
    libSCBW_gt_PatrolIssued_Init();
    libSCBW_gt_ScarabPathing_Init();
    libSCBW_gt_LimitActiveScarabs_Init();
    libSCBW_gt_CarrierCreated_Init();
    libSCBW_gt_InterceptorCreated_Init();
    libSCBW_gt_CarrierOrderedToAttack_Init();
    libSCBW_gt_CarrierLoop_Init();
    libSCBW_gt_NydusCreatesExit_Init();
    libSCBW_gt_UnitEntersNydus_Init();
    libSCBW_gt_ExitDies_Init();
    libSCBW_gt_UnitUsesBattery_Init();
    libSCBW_gt_MovingShot_Init();
    libSCBW_gt_SpiderMineDetectCloaked_Init();
    libSCBW_gt_Scarabbecomesidle_Init();
    libSCBW_gt_RemovewhenShieldDepleted_Init();
    libSCBW_gt_InfestUsed_Init();
    libSCBW_gt_GrantVision_Init();
    libSCBW_gt_Hallucination_Init();
    libSCBW_gt_LimitSelection_Init();
    libSCBW_gt_CTRL12UnitLimitonControlGroups_Init();
    libSCBW_gt_SHIFT12UnitLimitonControlGroups_Init();
    libSCBW_gt_DisableAutomine_Init();
    libSCBW_gt_DisableRallyIdleWorkerButton_Init();
    libSCBW_gt_DisableSmartCast_Init();
    libSCBW_gt_ZergForcedRally_Init();
    libSCBW_gt_DisableBestUnitLarvaMorphAbility_Init();
    libSCBW_gt_AirUnitCreated_Init();
    libSCBW_gt_ComsatGains50EnergyonCompletion_Init();
    libSCBW_gt_DisablePushing_Init();
    libSCBW_gt_CheckMovementThreads_Init();
    libSCBW_gt_LadderInit_Init();
    libSCBW_gt_sOpenStatsButtonPressed_Init();
    libSCBW_gt_sStatsDialogButtonPressed_Init();
    libSCBW_gt_osUpdateStats_Init();
    libSCBW_gt_CheckPlayerStatus_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSCBW_InitLib_completed = false;

void libSCBW_InitLib () {
    if (libSCBW_InitLib_completed) {
        return;
    }

    libSCBW_InitLib_completed = true;

    libSCBW_InitLibraries();
    libSCBW_InitVariables();
    libSCBW_InitCustomScript();
    libSCBW_InitTriggers();
}

